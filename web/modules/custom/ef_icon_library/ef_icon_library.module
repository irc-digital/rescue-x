<?php

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\ContentEntityInterface;

/**
 * Implements hook_theme().
 */
function ef_icon_library_theme() {
  return [
    'icon_library_icons' => [
      'variables' => [],
    ],
  ];
}

function template_preprocess_icon_library_icons(&$variables) {

  /** @var \Drupal\ef_icon_library\IconLibraryInterface $iconLibrary */
  $iconLibrary = \Drupal::service('ef.icon_library');

  $icons_in_use = $iconLibrary->getInUseIcons();

  $inlined_icons = '';

  foreach ($icons_in_use as $in_use_icon) {
    $file_path = $in_use_icon->uri;
    $inlined_icons .= file_get_contents($file_path);
  }

  $variables['inlined_icons'] = $inlined_icons;
}

/**
 * Implements hook_page_bottom().
 */
function ef_icon_library_page_bottom(array &$page_bottom) {
  $page_bottom['inlined_svg_icons'] = [
    '#theme' => 'icon_library_icons',
  ];
}

function ef_icon_library_theme_registry_alter(&$theme_registry) {
  foreach ($theme_registry as $entry_name => $entry) {
    if (strpos($entry_name, 'pattern_') === 0) {
      $theme_registry[$entry_name]['preprocess functions'][] = 'ef_icon_library_preprocess_icon_pattern';
    }
  }
}

function ef_icon_library_preprocess_icon_pattern (array &$variables) {
  /** @var \Drupal\ef_icon_library\IconLibraryInterface $iconLibrary */
  $iconLibrary = \Drupal::service('ef.icon_library');
  $iconLibrary->patternIsBeingRendered ($variables);
}

/**
 * This is the callback function used by the ListIconItem field type
 *
 * @param \FieldStorageConfig $definition
 * @param \ContentEntityInterface|NULL $entity
 * @param $cacheable
 * @return array
 */
function ef_icon_library_allowed_icon_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  /** @var \Drupal\ef_icon_library\IconLibraryInterface $icon_library */
  $icon_library = \Drupal::service('ef.icon_library');

  return $icon_library->getIconList();
}

/**
 * Implements hook_field_widget_info_alter().
 */
function ef_icon_library_field_widget_info_alter(array &$info) {
  // Allow our icon list item to be used by any widget that supports list_string
  foreach ($info as $widget_id => &$widget_info) {
    if (in_array('list_string', $widget_info['field_types'])) {
      $widget_info['field_types'][] = 'list_icon';
    }
  }
}