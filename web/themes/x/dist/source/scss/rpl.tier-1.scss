//
// Tier 1 variables
//
// The main purpose of tier 1 is to set out the values for single CSS properties concepts, such as font size and color.
//
// This file is, essentially, a bunch of enumerations and represent the very core building blocks of the visual system.
//
// The enumerations are deliberately a little obfuscates to avoid direct array access. Access should all go through
// the specific accessor function and/or mixin provided for each.
//
//

@function safe-map-get($map, $option) {
  @if map-has-key($map, $option) {
    @return map-get($map, $option);
  } @else {
    @error '#{$map} does not contain the key #{$option}';
    @return null;
  }
}

//
// Font family
//
$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;

//
// Colors
//

//
// Function to get a brand color
//
@function get-brand-color($option: 'primary') {
  $brand-colors: (
    'primary': #fdc513,
    'primary-tint-1': #ffd44b,
    'primary-tint-2': #ffd960,
  );

  @if $option != 'all' {
    @return safe-map-get($brand-colors, $option);
  } @else {
    @return $brand-colors;
  }
}

// generates a JSON array of brand colors to be used by PatternLab
$xxx-bc: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', get-brand-color('all'), (prefix: '{ "color_brand":', suffix: '}'));

//
// Function to get a neutral color
//
@function get-neutral-color($option: 'gray') {
  $neutral-colors: (
    'white': #fff,
    'very-light-gray': #f6f6f6,
    'light-gray': #e9e9e9,
    'gray': #d1d1d1,
    'dark-gray': #666,
    'very-dark-gray': #383838,
    'black': #000,
  );
  @if $option != 'all' {
    @return safe-map-get($neutral-colors, $option);
  } @else {
    @return $neutral-colors;
  }
}

// generates a JSON array of neutral colors to be used by PatternLab
$xxx-nc: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', get-neutral-color('all'), (prefix: '{ "color_neutral":', suffix: '}'));

//
// Function to get a utility color
//
@function get-utility-color($option: 'alert') {
  $utility-colors: (
    'alert': #ee2d14,
  );
  @if $option != 'all' {
    @return safe-map-get($utility-colors, $option);
  } @else {
    @return $utility-colors;
  }
}
// generates a JSON array of utility colors to be used by PatternLab
$xxx-uc: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', get-utility-color('all'), (prefix: '{ "color_utility":', suffix: '}'));


//
// Font size
//

// Function to get a font size value from its array entry key
@function get-font-size($option: 'm') {
  // don't panic - these get converted to rem when they are returned
  $font-sizes: (
    'xxs': 12px,
    'xs': 14px,
    's': 16px,
    'm': 18px,
    'ml': 20px,
    'l': 24px,
    'xl': 28px,
    'xxl': 36px,
    'xxxl': 44px,
    'xxxxl': 52px,
    'xxxxxl': 60px,
  );
  @if $option != 'all' {
    @return rem(safe-map-get($font-sizes, $option));
  } @else {
    @return $font-sizes;
  }
}

//
// Font size mixin
//
@mixin font-size($option: 'm') {
  font-size: get-font-size($option);
}

// generates a JSON array of font sizes to be used by PatternLab
$xxx-fs: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', get-font-size('all'), (prefix: '{ "font_size":', suffix: '}'));

//
// Line height
//

// Function to get a line height value from its array entry key
@function get-line-height($option: 'm') {
  $line-heights: (
    'xxs': 1,
    'xs': 1.2,
    's': 1.4,
    'm': 1.6,
    'l': 1.75,
  );
  @if $option != 'all' {
    @return safe-map-get($line-heights, $option);
  } @else {
    @return $line-heights;
  }
}

//
// Line height mixin
//
@mixin line-height($option: 'm') {
  line-height: get-line-height($option);
}

// generates a JSON array of line heights to be used by PatternLab
$xxx-lh: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', get-line-height('all'), (prefix: '{ "line_height":', suffix: '}'));

//
// Letter spacing
//

// Function to get a letter spacing value from its array entry key
@function get-letter-spacing($option: 'standard') {
  $letter-spacings: (
    'compact': -.03em,
    'standard': -.01em,
  );
  @if $option != 'all' {
    @return safe-map-get($letter-spacings, $option);
  } @else {
    @return $letter-spacings;
  }
}

@mixin letter-spacing($option: 'standard') {
  letter-spacing: get-letter-spacing($option);
}

// generates a JSON array of letter spacing to be used by PatternLab
$xxx-ls: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', get-letter-spacing('all'), (prefix: '{ "letter_spacing":', suffix: '}'));

//
// Font weight
//

// Function to get a font weight value from its array entry key
@function get-font-weight($option: 'normal') {
  $font-weights: (
    'light': 300,
    'normal': 400,
    'bold': 700,
  );
  @if $option != 'all' {
    @return safe-map-get($font-weights, $option);
  } @else {
    @return $font-weights;
  }
}

@mixin font-weight($option: 'normal') {
  font-weight: get-font-weight($option);
}

// generates a JSON array of font sizes to be used by PatternLab
$xxx-fw: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', get-font-weight('all'), (prefix: '{ "font_weight":', suffix: '}'));

//
// Font style
//

// Function to get a font style value
@function get-font-style($option: 'normal') {
  $font-styles: (
    'normal': 'normal',
    'italic': 'italic',
    'oblique': 'oblique',
  );
  @if $option != 'all' {
    @return safe-map-get($font-styles, $option);
  } @else {
    @return $font-styles;
  }
}

@mixin font-style($option: 'normal') {
  font-style: get-font-style($option);
}

// generates a JSON array of font style to be used by PatternLab
$xxx-fst: export('dist/source/_patterns/00-subatoms/27-font-style/font-style.json', get-font-weight('all'), (prefix: '{ "font_style":', suffix: '}'));

// Function to get a spacing value from its array entry key
@function get-spacing($option: 'm') {
  // don't panic - these get converted to rem when they are returned
  $space-unit: 16px;
  $spacings: (
    'xs': $space-unit / 4, // 4px
    's': $space-unit / 2, // 8px
    'm': $space-unit,  // 16px
    'ml': 1.5 * $space-unit, // 24px
    'l': 2 * $space-unit, // 32px
    'xl': 3 * $space-unit, // 48px
    'xxl': 4 * $space-unit, // 64px
  );
  @if $option != 'all' {
    @return rem(safe-map-get($spacings, $option));
  } @else {
    @return $spacings;
  }
}
// generates a JSON array of spacing to be used by PatternLab
$xxx-spac: export('dist/source/_patterns/00-subatoms/30-spacing/spacing.json', get-spacing('all'), (prefix: '{ "spacing":', suffix: '}'));


// end of file

