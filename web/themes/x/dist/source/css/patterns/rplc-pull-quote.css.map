{"version":3,"sources":["../scss/base/_base.scss","../scss/x.tier-1.scss","../scss/abstract/_rem.scss","../scss/abstract/_mixins.scss","05-components/50-pull-quote/rplc-pull-quote.scss","../scss/_core.scss","05-components/50-pull-quote/_rplc-pull-quote.variables.scss"],"names":[],"mappings":"AAEA;EACE,4DCqBqE,EDpBtE;;AAED;EC2GE,oBC7E0D;ED2J1D,iBAZc;EAbd,wBAVoB;EAdpB,iBAdU;EDxHV,YCqDe,EDpDhB;EGqCG;IHxCJ;MC2GE,mBC7E0D;MD0G1D,kBAba,EDxHd,EAAA;;AAED;EACE,YCiDe,EDhDhB;;AIVD;EAGE,uBHiDe;EGhDf,iBAAgB;EAChB,YAAW,EA4GZ;EA1GC;IDEA,kBAAiB;IACjB,mBAAkB;IAClB,mBEDwD;IFExD,mBENoB;IFOpB,oBEPoB,EDGnB;EAED;IACE,gBAAe;IACf,aAAY;IACZ,oBAAmB;IACnB,6BAA4B;IAC5B,mBAAkB,EAKnB;IDsBC;MChCF;QAQI,6BAA4B,EAE/B,EAAA;EAED;IACE,gBAAe;IACf,mBAAkB;IAClB,iBAAgB;IAChB,sBAAqB;IACrB,kBAAiB;IACjB,mBAAkB,EA6BnB;IDfC;MCpBF;QASI,gBAAe;QACf,mBAAkB,EAyBrB,EAAA;IDjBC;MClBF;QAcI,eAAc,EAqBjB,EAAA;IAnCA;MAkBG,ijBAAgjB;MAChjB,sBAAqB;MACrB,YAAW;MACX,eAAc;MACd,aAAY;MACZ,WAAU;MACV,mBAAkB;MAClB,WAAU;MACV,YAAW,EAQZ;MDdD;QCpBD;UA6BK,sBAAqB;UACrB,aAAY;UACZ,WAAU;UACV,YAAW,EAEd,EAAA;EAGF;IAOG,uBHfW;IGgBX,UAAS,EASV;IDlCD;MCiBD;QAWK,iBAAgB,EAMnB,EAAA;EDlCD;ICqCD;MAIK,YAAW;MACX,mBAAkB,EACnB,EAAA;ED3CH;ICoDD;MAIK,aAAY;MACZ,kBAAiB,EAClB,EAAA;;ADhEH;EC0DD;IASO,oBAAmB,EACpB,EAAA;EAKP;IACE,mCE/GsD,EFgHvD","file":"rplc-pull-quote.css","sourcesContent":["@import '../x.tier-2';\n\nhtml {\n  font-family: $font-family-sans-serif;\n}\n\nbody {\n  @include typography-body;\n  color: get-neutral-color('black');\n}\n\na {\n  color: get-neutral-color('black');\n}\n\n// end of file\n","//\n// Tier 1 variables\n//\n// The main purpose of tier 1 is to set out the values for single CSS properties concepts, such as font size and color.\n//\n// This file is, essentially, a bunch of enumerations and represent the very core building blocks of the visual system.\n//\n// The enumerations are deliberately a little obfuscates to avoid direct array access. Access should all go through\n// the specific accessor function and/or mixin provided for each.\n//\n//\n\n@function safe-map-get($map, $option) {\n  @if map-has-key($map, $option) {\n    @return map-get($map, $option);\n  } @else {\n    @error '#{$map} does not contain the key #{$option}';\n    @return null;\n  }\n}\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n//\n// Function to get a brand color\n//\n@function get-brand-color($option: 'primary') {\n  $brand-colors: (\n    'primary': #fdc513,\n    'primary-tint-1': #ffd44b,\n    'primary-tint-2': #ffd960,\n  );\n\n  @if $option != 'all' {\n    @return safe-map-get($brand-colors, $option);\n  } @else {\n    @return $brand-colors;\n  }\n}\n\n// generates a JSON array of brand colors to be used by PatternLab\n$xxx-bc: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', get-brand-color('all'), (prefix: '{ \"color_brand\":', suffix: '}'));\n\n//\n// Function to get a neutral color\n//\n@function get-neutral-color($option: 'gray') {\n  $neutral-colors: (\n    'white': #fff,\n    'very-light-gray': #f6f6f6,\n    'light-gray': #e9e9e9,\n    'gray': #d1d1d1,\n    'dark-gray': #666,\n    'very-dark-gray': #383838,\n    'black': #000,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($neutral-colors, $option);\n  } @else {\n    @return $neutral-colors;\n  }\n}\n\n// generates a JSON array of neutral colors to be used by PatternLab\n$xxx-nc: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', get-neutral-color('all'), (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n//\n// Function to get a utility color\n//\n@function get-utility-color($option: 'alert') {\n  $utility-colors: (\n    'alert': #ee2d14,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($utility-colors, $option);\n  } @else {\n    @return $utility-colors;\n  }\n}\n// generates a JSON array of utility colors to be used by PatternLab\n$xxx-uc: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', get-utility-color('all'), (prefix: '{ \"color_utility\":', suffix: '}'));\n\n\n//\n// Font size\n//\n\n// Function to get a font size value from its array entry key\n@function get-font-size($option: 'm') {\n  $font-sizes: (\n    'm': rem(18px),\n    'm-1': rem(20px),\n    'l': rem(24px),\n    'l-1': rem(36px),\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-sizes, $option);\n  } @else {\n    @return $font-sizes;\n  }\n}\n\n//\n// Font size mixin\n//\n@mixin font-size($option: 'm') {\n  font-size: get-font-size($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fs: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', get-font-size('all'), (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n\n// Function to get a line height value from its array entry key\n@function get-line-height($option: 'm') {\n  $line-heights: (\n    's': 1,\n    's-1': 1.2,\n    'm': 1.6,\n    'm-1': 1.75,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($line-heights, $option);\n  } @else {\n    @return $line-heights;\n  }\n}\n\n//\n// Line height mixin\n//\n@mixin line-height($option: 'm') {\n  line-height: get-line-height($option);\n}\n\n// generates a JSON array of line heights to be used by PatternLab\n$xxx-lh: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', get-line-height('all'), (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n\n// Function to get a letter spacing value from its array entry key\n@function get-letter-spacing($option: 'm') {\n  $letter-spacings: (\n    'compact': -.03em,\n    'standard': -.01em,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($letter-spacings, $option);\n  } @else {\n    @return $letter-spacings;\n  }\n}\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: get-letter-spacing($option);\n}\n\n// generates a JSON array of letter spacing to be used by PatternLab\n$xxx-ls: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', get-letter-spacing('all'), (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n\n// Function to get a font weight value from its array entry key\n@function get-font-weight($option: 'm') {\n  $font-weights: (\n    'light': 300,\n    'normal': 400,\n    'bold': 700,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-weights, $option);\n  } @else {\n    @return $font-weights;\n  }\n}\n\n@mixin font-weight($option: 'normal') {\n  font-weight: get-font-weight($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fw: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', get-font-weight('all'), (prefix: '{ \"font_weight\":', suffix: '}'));\n\n\n// end of file\n\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n","@import 'rplc-pull-quote.variables';\n\n// if no modifier is used the quote should be full width\n.rplc-pull-quote {\n  $self: &;\n\n  background-color: $pull-quote-background-color;\n  margin-top: 45px;\n  width: 100%;\n\n  &__content {\n    @include standard-row;\n  }\n\n  &__text-wrapper {\n    font-size: 20px;\n    height: auto;\n    margin: 45px auto 0;\n    padding: 65px 16px 40px 25px;\n    position: relative;\n\n    @include breakpoint(phablet) {\n      padding: 15px 20px 20px 25px;\n    }\n  }\n\n  &__text {\n    font-size: 20px;\n    font-style: italic;\n    font-weight: 100;\n    letter-spacing: .17px;\n    line-height: 1.35;\n    position: relative;\n\n    @include breakpoint(phablet) {\n      font-size: 28px;\n      padding-left: 87px;\n    }\n\n    @include breakpoint(tablet) {\n      margin-left: 0;\n    }\n\n    &::before {\n      background: url('data:image/svg+xml,%3Csvg%20viewBox%3D%220%200%2064%2064%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20stroke-linejoin%3D%22round%22%20stroke-miterlimit%3D%221.414%22%3E%3Cpath%20d%3D%22M11.8%2048.3V33c0-10.8%205.3-18.5%2016.3-20.1v7.3c-5.6%201.7-6.4%205.5-6.5%2010.8h6.5v17.3H11.8zm23.8%200V33c0-10.8%205.4-18.5%2016.3-20.1v7.3c-5.6%201.7-6.4%205.5-6.5%2010.8h6.5v17.3H35.6z%22%20fill%3D%22%23fdc513%22%20fill-rule%3D%22nonzero%22%2F%3E%3C%2Fsvg%3E') no-repeat center center;\n      background-size: 65px;\n      content: '';\n      display: block;\n      height: 50px;\n      left: -5px;\n      position: absolute;\n      top: -60px;\n      width: 50px;\n\n      @include breakpoint(phablet) {\n        background-size: 85px;\n        height: 80px;\n        top: -10px;\n        width: 80px;\n      }\n    }\n  }\n\n  &--placement-left,\n  &--placement-right {\n    // drop standard row and floats down a level on to content*\n    // outer div to full width and standard row to content, whit bg on text-wrapper bq\n    //white bg on wrapper for float and on outer for full width\n    //margins on blockquote\n    #{ $self }__text-wrapper {\n      background-color: $pull-quote-background-color;\n      margin: 0;\n\n      @include breakpoint(phablet) {\n        max-width: 450px;\n      }\n\n      // @include breakpoint(desktop) {\n      //   max-width: 550px;\n      // }\n    }\n  }\n\n  &--placement-left {\n\n    @include breakpoint(phablet) {\n      #{ $self }__text-wrapper {\n        float: left;\n        margin-right: 45px;\n      }\n    }\n    // @include breakpoint(desktop) {\n    //   #{ $self }__text-wrapper {\n    //      margin-left: -90px;\n    //   }\n    // }\n  }\n\n  &--placement-right {\n\n    @include breakpoint(phablet) {\n      #{ $self }__text-wrapper {\n        float: right;\n        margin-left: 45px;\n      }\n      @include breakpoint(desktop) {\n        #{ $self }__text-wrapper {\n          margin-right: -90px;\n        }\n    }\n    }\n  }\n\n  &--background-transparent {\n    background-color: $pull-quote-transparent-background-color;\n  }\n}\n\n","@import 'abstract/rem';\n@import 'abstract/mixins';\n@import 'x.tier-1';\n@import 'x.tier-2';\n\n// public variables\n\n$standard-overlay-treatment: rgba(0, 0, 0, .5);\n\n$standard-gutter: 1rem;\n$standard-horizontal-margin-accounting-for-gutters: 2 * $standard-gutter;\n$private-row-gutter: $standard-gutter; // kept distinct from the standard gutter as i can see this changing to 2rem\n$well-width-inner: rem(1208px);\n$max-row-width: $well-width-inner + ($standard-gutter * 2);\n\n$smallest-desktop-size: $max-row-width;\n$smallest-desktop-size-less-gutters: $well-width-inner - rem(1px);\n$smallest-laptop-size: rem(1024px);\n$smallest-tablet-size: rem(768px);\n$smallest-phablet-size: rem(641px);\n\n// The default font family.\n$base-font-family: $font-family-sans-serif;\n\n$body-background-color: get-neutral-color('very-light-gray');\n\n@import 'base/base';\n\n\n\n// end of file\n","@import '../../../scss/core';\n\n$pull-quote-background-color: get-neutral-color('white');\n$pull-quote-transparent-background-color: rgba(1, 1, 5, 0);\n// end of file\n"]}