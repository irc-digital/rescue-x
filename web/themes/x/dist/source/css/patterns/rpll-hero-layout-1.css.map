{"version":3,"sources":["10-layouts/30-hero-layouts/05-hero-layout-1/rpll-hero-layout-1.scss","../scss/abstract/_mixins.scss","../scss/_core.scss","../scss/abstract/_rem.scss","../scss/rpl.tier-1.scss"],"names":[],"mappings":"AAKE;ECOA,kBAAiB;EACjB,mBAAkB;EAClB,mBCJqD;EDKrD,mBEqB0D;EFpB1D,oBEoB0D,EH7BzD;;AAED;EACE,eAAc,EACf;;AAED;EACE,uBIyCa;EJxCb,cAAa;EACb,mBGoBwD;EHnBxD,yEAAwE;EACxE,2BAA0B;EAC1B,cAAa;EACb,mBAAkB;EAClB,YAAW,EACZ;;AAED;EACE,qBAAoB,EACrB;;AAED;EACE,qBAAoB,EACrB;;AAED;EACE,uBAAsB,EACvB;;AAED;EACE,2BIwBa;EJvBb,uBAAsB;EACtB,kBGHwD,EHIzD;;AAEA;EAEG,+CAA8C,EAC/C;;ACCD;EDGA;IACE,sBGdsD;IHetD,6FAA4F;IAC5F,+BAA8B,EAE/B;EAEA;IAEG,+CAA8C;IAC9C,2BAA0B,EAC3B,EAAA;;AAKJ;EAEG,uBG/BsD,EHgCvD;;ACtBD;EDmBD;IAOK,qBGpCoD,EHqCrD,EAAA;;AAGH;EAXD;IAaK,sBG1CoD,EH2CrD,EAAA;;AAIL;EACE;IACE,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,6BAAsB;IAAtB,8BAAsB;QAAtB,2BAAsB;YAAtB,uBAAsB;IACtB,oBAAe;QAAf,gBAAe;IACf,kBAAiB,EAClB;EAED;IAEE,mBAA+B;IAC/B,WAAU,EACX;EAED;IAEE,WAAU,EACX;EAED;IAEE,oBGpEsD,EHqEvD;EAED;IACE,gBAAe;IACf,eAAc,EACf;EAEA;IAEG,kBAAiB,EAClB,EAAA","file":"rpll-hero-layout-1.css","sourcesContent":["@import 'rpll-hero-layout-1.variables';\n\n.rpll-hero-layout-1 {\n  $self: &;\n\n  &__inner-content-wrapper {\n    @include standard-row;\n  }\n\n  &__image-wrapper {\n    line-height: 0;\n  }\n\n  &__text-wrapper {\n    background-color: get-neutral-color('white');\n    display: grid;\n    grid-row-gap: get-spacing();\n    grid-template-areas: 'primary_1' 'primary_2' 'secondary_1' 'secondary_2';\n    grid-template-columns: 1fr;\n    padding: 30px;\n    position: relative;\n    z-index: 10;\n  }\n\n  &__primary-1 {\n    grid-area: primary_1;\n  }\n\n  &__primary-2 {\n    grid-area: primary_2;\n  }\n\n  &__secondary-1 {\n    grid-area: secondary_1;\n  }\n\n  &__secondary-2 {\n    border-top: 1px solid get-neutral-color('black');\n    grid-area: secondary_2;\n    padding-top: get-spacing();\n  }\n\n  &--no-second-blocks {\n    #{$self}__text-wrapper {\n      grid-template-areas: 'primary_1' 'secondary_1';\n    }\n  }\n\n  @include breakpoint(phablet) {\n    &__text-wrapper {\n      grid-column-gap: get-spacing('m');\n      grid-template-areas: 'primary_1 primary_1' 'primary_2 secondary_1' 'secondary_2 secondary_2';\n      grid-template-columns: 1fr 1fr;\n\n    }\n\n    &--no-second-blocks {\n      #{$self}__text-wrapper {\n        grid-template-areas: 'primary_1' 'secondary_1';\n        grid-template-columns: 1fr;\n      }\n    }\n  }\n\n  // modifiers\n  &--has-image {\n    #{$self}__text-wrapper {\n      margin-top: $hero-text-wrapper-eats-in;\n    }\n\n    @include breakpoint(phablet) {\n      #{$self}__text-wrapper {\n        margin-top: $hero-text-wrapper-eats-in-phablet;\n      }\n    }\n\n    @media only screen and (min-width: #{$hero-layout-1-smallest-large-device-size}) {\n      #{$self}__text-wrapper {\n        margin-top: $hero-text-wrapper-eats-in-desktop;\n      }\n    }\n  }\n\n  @media only screen and (min-width: #{$hero-layout-1-smallest-large-device-size}) {\n    &__text-wrapper {\n      display: flex;\n      flex-direction: column;\n      flex-wrap: wrap;\n      max-height: 530px;\n    }\n\n    &__primary-1,\n    &__primary-2 {\n      margin-right: 2 * get-spacing();\n      width: 66%;\n    }\n\n    &__secondary-1,\n    &__secondary-2 {\n      width: 32%;\n    }\n\n    &__primary-1,\n    &__secondary-1 {\n      margin-bottom: get-spacing();\n    }\n\n    &__secondary-2 {\n      border-width: 0;\n      padding-top: 0;\n    }\n\n    &--no-second-blocks {\n      #{$self}__text-wrapper {\n        max-height: 300px;\n      }\n    }\n  }\n}\n\n\n// end of file\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: get-spacing();\n  padding-right: get-spacing();\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n","@import 'abstract/rem';\n@import 'abstract/mixins';\n@import 'rpl.tier-1';\n@import 'rpl.tier-2';\n\n// public variables\n\n$standard-overlay-treatment: rgba(0, 0, 0, .5);\n\n$well-width-inner: rem(1208px);\n$max-row-width: $well-width-inner + (get-spacing() * 2);\n\n$smallest-desktop-size: $max-row-width;\n$smallest-desktop-size-less-gutters: $well-width-inner - rem(1px);\n$smallest-laptop-size: rem(1024px);\n$smallest-tablet-size: rem(768px);\n$smallest-phablet-size: rem(641px);\n\n// The default font family.\n$base-font-family: $font-family-sans-serif;\n\n$body-background-color: get-neutral-color('very-light-gray');\n\n$max-text-width: rem(850px);\n$minimum-size-width: rem(320px);\n\n// end of file\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n","//\n// Tier 1 variables\n//\n// The main purpose of tier 1 is to set out the values for single CSS properties concepts, such as font size and color.\n//\n// This file is, essentially, a bunch of enumerations and represent the very core building blocks of the visual system.\n//\n// The enumerations are deliberately a little obfuscates to avoid direct array access. Access should all go through\n// the specific accessor function and/or mixin provided for each.\n//\n//\n\n@function safe-map-get($map, $option) {\n  @if map-has-key($map, $option) {\n    @return map-get($map, $option);\n  } @else {\n    @error '#{$map} does not contain the key #{$option}';\n    @return null;\n  }\n}\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n//\n// Function to get a brand color\n//\n@function get-brand-color($option: 'primary') {\n  $brand-colors: (\n    'primary': #fdc513,\n    'primary-tint-1': #ffd44b,\n    'primary-tint-2': #ffd960,\n  );\n\n  @if $option != 'all' {\n    @return safe-map-get($brand-colors, $option);\n  } @else {\n    @return $brand-colors;\n  }\n}\n\n// generates a JSON array of brand colors to be used by PatternLab\n$xxx-bc: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', get-brand-color('all'), (prefix: '{ \"color_brand\":', suffix: '}'));\n\n//\n// Function to get a neutral color\n//\n@function get-neutral-color($option: 'gray') {\n  $neutral-colors: (\n    'white': #fff,\n    'very-light-gray': #f6f6f6,\n    'light-gray': #e9e9e9,\n    'gray': #d1d1d1,\n    'dark-gray': #666,\n    'very-dark-gray': #383838,\n    'black': #000,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($neutral-colors, $option);\n  } @else {\n    @return $neutral-colors;\n  }\n}\n\n// generates a JSON array of neutral colors to be used by PatternLab\n$xxx-nc: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', get-neutral-color('all'), (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n//\n// Function to get a utility color\n//\n@function get-utility-color($option: 'alert') {\n  $utility-colors: (\n    'alert': #ee2d14,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($utility-colors, $option);\n  } @else {\n    @return $utility-colors;\n  }\n}\n// generates a JSON array of utility colors to be used by PatternLab\n$xxx-uc: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', get-utility-color('all'), (prefix: '{ \"color_utility\":', suffix: '}'));\n\n\n//\n// Font size\n//\n\n// Function to get a font size value from its array entry key\n@function get-font-size($option: 'm') {\n  // don't panic - these get converted to rem when they are returned\n  $font-sizes: (\n    'xxs': 12px,\n    'xs': 14px,\n    's': 16px,\n    'm': 18px,\n    'ml': 20px,\n    'l': 24px,\n    'xl': 28px,\n    'xxl': 36px,\n    'xxxl': 44px,\n    'xxxxl': 52px,\n    'xxxxxl': 60px,\n  );\n  @if $option != 'all' {\n    @return rem(safe-map-get($font-sizes, $option));\n  } @else {\n    @return $font-sizes;\n  }\n}\n\n//\n// Font size mixin\n//\n@mixin font-size($option: 'm') {\n  font-size: get-font-size($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fs: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', get-font-size('all'), (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n\n// Function to get a line height value from its array entry key\n@function get-line-height($option: 'm') {\n  $line-heights: (\n    'xxs': 1,\n    'xs': 1.2,\n    's': 1.4,\n    'm': 1.6,\n    'l': 1.75,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($line-heights, $option);\n  } @else {\n    @return $line-heights;\n  }\n}\n\n//\n// Line height mixin\n//\n@mixin line-height($option: 'm') {\n  line-height: get-line-height($option);\n}\n\n// generates a JSON array of line heights to be used by PatternLab\n$xxx-lh: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', get-line-height('all'), (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n\n// Function to get a letter spacing value from its array entry key\n@function get-letter-spacing($option: 'm') {\n  $letter-spacings: (\n    'compact': -.03em,\n    'standard': -.01em,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($letter-spacings, $option);\n  } @else {\n    @return $letter-spacings;\n  }\n}\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: get-letter-spacing($option);\n}\n\n// generates a JSON array of letter spacing to be used by PatternLab\n$xxx-ls: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', get-letter-spacing('all'), (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n\n// Function to get a font weight value from its array entry key\n@function get-font-weight($option: 'm') {\n  $font-weights: (\n    'light': 300,\n    'normal': 400,\n    'bold': 700,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-weights, $option);\n  } @else {\n    @return $font-weights;\n  }\n}\n\n@mixin font-weight($option: 'normal') {\n  font-weight: get-font-weight($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fw: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', get-font-weight('all'), (prefix: '{ \"font_weight\":', suffix: '}'));\n\n// Function to get a spacing value from its array entry key\n@function get-spacing($option: 'm') {\n  // don't panic - these get converted to rem when they are returned\n  $space-unit: 16px;\n  $spacings: (\n    'xs': $space-unit / 4, // 4px\n    's': $space-unit / 2, // 8px\n    'm': $space-unit,  // 16px\n    'ml': 1.5 * $space-unit, // 24px\n    'l': 2 * $space-unit, // 32px\n    'xl': 3 * $space-unit, // 48px\n    'xxl': 4 * $space-unit, // 64px\n  );\n  @if $option != 'all' {\n    @return rem(safe-map-get($spacings, $option));\n  } @else {\n    @return $spacings;\n  }\n}\n// generates a JSON array of spacing to be used by PatternLab\n$xxx-spac: export('dist/source/_patterns/00-subatoms/30-spacing/spacing.json', get-spacing('all'), (prefix: '{ \"spacing\":', suffix: '}'));\n\n\n// end of file\n\n"]}