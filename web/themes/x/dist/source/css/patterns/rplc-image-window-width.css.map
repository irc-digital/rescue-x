{"version":3,"sources":["05-components/30-images/10-image-window-width/rplc-image-window-width.scss","05-components/30-images/_rplc-images.shared.scss","../scss/abstract/_mixins.scss"],"names":[],"mappings":"AAKE,wCACE,YAAA,EAGF,0CCUA,YAAA,KACA,aAAA,KACA,UAAA,MACA,UAAA,MACA,SAAA,SACA,IAAA,MACA,MAAA,mBCqBE,8CFrCF,0CCmBE,IAAA,MACA,MAAA","file":"rplc-image-window-width.css","sourcesContent":["@import '../rplc-images.shared';\n@import 'rplc-image-window-width.variables';\n\n.rplc-image-window-width {\n\n  &__image-wrapper {\n    line-height: 0;\n  }\n\n  &__caption-wrapper {\n    @include image-caption-common-treatment-fluid;\n  }\n}\n\n// end of file\n\n","@import '../../../scss/core';\n\n@mixin image-caption-common-treatment-fixed {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: rem(376px);\n  position: relative;\n  top: -#{get-spacing()};\n\n  @include breakpoint(phablet) {\n    align-items: center;\n    display: flex;\n    height: 100%;\n    position: absolute;\n    top: 0;\n  }\n}\n\n@mixin image-caption-common-treatment-fluid {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: rem(864px);\n  min-width: $minimum-size-width - (2 * get-spacing());\n  position: relative;\n  top: -#{get-spacing()};\n  width: calc(100vw - #{2 * get-spacing()});\n\n  @include breakpoint(phablet) {\n    top: -#{get-spacing('xxl')};\n    width: calc(100vw - #{2 * get-spacing('xxl')});\n  }\n}\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: get-spacing();\n  padding-right: get-spacing();\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n"]}