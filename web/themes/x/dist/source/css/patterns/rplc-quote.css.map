{"version":3,"sources":["05-components/10-quote/rplc-quote.scss","../scss/_variables.scss","../scss/x.tier-1.scss"],"names":[],"mappings":"AAEA;EAEE,kBAAiB,EA4HlB;ECzCG;IDrFJ;MAII,iBAAgB,EA0HnB,EAAA;EAvHC;IC4CA,kBAAiB;IACjB,mBAAkB;IAClB,mBA3BwD;IA4BxD,mBAhCoB;IAiCpB,oBAjCoB;IDZlB,wBAAuB;IACvB,UAAS;IACT,iBAAgB;IAChB,yBAAgB;YAAhB,iBAAgB;IAChB,eAAc;IACd,iBAAgB;IAChB,mBAAkB,EACnB;EAED;IACE,eAAc;IACd,mBAAkB;IAClB,YAAW;IACX,WAAU,EAeX;IC+CC;MDlEF;QAOI,YAAW;QACX,mBAAkB,EAWrB,EAAA;IC6CC;MDhEF;QAYI,YAAW,EAOd,EAAA;ICyCC;MD5DF;QAgBI,aAAY,EAGf,EAAA;EAED;IACE,cAAa;IACb,aAAY,EACb;EAED;IACE,uBEvBW;IFwBX,aAAY;IACZ,WAAU;IACV,oBAAmB;IACnB,kBAAiB;IACjB,wBAAuB;IACvB,mBAAkB;IAClB,WAAU;IACV,0BAAwC,EAyBzC;ICMC;MDxCF;QAYI,WAAU;QACV,iBAAgB;QAChB,kBAAiB;QACjB,mBAAkB;QAClB,kBAAiB;QACjB,aAAY;QACZ,WAAU,EAgBb,EAAA;ICIC;MDtCF;QAsBI,WAAU;QACV,mBAAkB;QAClB,kBAAiB;QACjB,aAAY,EASf,EAAA;ICEC;MDpCF;QA6BI,YAAW;QACX,6BAA4B;QAC5B,mBAAkB;QAClB,aAAY,EAEf,EAAA;EAED;IACE,gBAAe;IACf,mBAAkB;IAClB,kBAAiB;IACjB,oBAAmB;IACnB,mBAAkB,EAuCnB;ICxCC;MDJF;QAQI,gBAAe,EAoClB,EAAA;IC1CC;MDFF;QAYI,eAAc,EAgCjB,EAAA;IA5CA;MAgBG,ijBAAgjB;MAChjB,sBAAqB;MACrB,YAAW;MACX,eAAc;MACd,aAAY;MACZ,WAAU;MACV,mBAAkB;MAClB,WAAU;MACV,YAAW,EAmBZ;MCvCD;QDJD;UA2BK,QAAO,EAgBV,EAAA;MCzCD;QDFD;UA+BK,aAAY;UACZ,WAAU;UACV,YAAW,EAUd,EAAA;MC3CD;QDAD;UAqCK,sBAAqB;UACrB,aAAY;UACZ,YAAW;UACX,UAAS;UACT,YAAW,EAEd,EAAA","file":"rplc-quote.css","sourcesContent":["@import 'rplc-quote.variables';\n\n.rplc-quote {\n\n  min-height: 460px;\n  @include breakpoint(phablet) {\n    min-height: auto;\n  }\n\n  &__content {\n    @include standard-row;\n\n    background: transparent;\n    border: 0;\n    border-radius: 0;\n    box-shadow: none;\n    margin: 0 auto;\n    overflow: hidden;\n    position: relative;\n  }\n\n  &__image-wrapper {\n    line-height: 0;\n    text-align: center;\n    width: 100%;\n    z-index: 1;\n\n    @include breakpoint(phablet) {\n      left: -25vw;\n      position: absolute;\n    }\n\n    @include breakpoint(tablet) {\n      left: -21vw;\n    }\n\n    @include breakpoint(desktop) {\n      left: -330px;\n    }\n\n  }\n\n  &__image {\n    height: 328px;\n    width: 328px;\n  }\n\n  &__text-wrapper {\n    background-color: $white;\n    height: auto;\n    left: auto;\n    margin: 25px auto 0;\n    min-height: 326px;\n    padding: 59px 17px 17px;\n    position: relative;\n    top: -28px;\n    width: calc(100vw - #{$standard-gutter});\n\n    @include breakpoint(phablet) {\n      left: 18vw;\n      margin-top: 60px;\n      min-height: 326px;\n      padding-left: 27px;\n      padding-top: 61px;\n      width: 423px;\n      z-index: 3;\n    }\n\n    @include breakpoint(tablet) {\n      left: 14vw;\n      padding-left: 27px;\n      padding-top: 61px;\n      width: 423px;\n    }\n\n    @include breakpoint(laptop) {\n      left: 135px;\n      padding: 12px 15px 12px 85px;\n      position: relative;\n      width: 674px;\n    }\n  }\n\n  &__quote {\n    font-size: 20px;\n    font-style: italic;\n    line-height: 1.45;\n    margin-bottom: 37px;\n    position: relative;\n\n    @include breakpoint(phablet) {\n      font-size: 22px;\n    }\n\n    @include breakpoint(tablet) {\n      margin-left: 0;\n    }\n\n    &::before {\n      background: url('data:image/svg+xml,%3Csvg%20viewBox%3D%220%200%2064%2064%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20stroke-linejoin%3D%22round%22%20stroke-miterlimit%3D%221.414%22%3E%3Cpath%20d%3D%22M11.8%2048.3V33c0-10.8%205.3-18.5%2016.3-20.1v7.3c-5.6%201.7-6.4%205.5-6.5%2010.8h6.5v17.3H11.8zm23.8%200V33c0-10.8%205.4-18.5%2016.3-20.1v7.3c-5.6%201.7-6.4%205.5-6.5%2010.8h6.5v17.3H35.6z%22%20fill%3D%22%23fdc513%22%20fill-rule%3D%22nonzero%22%2F%3E%3C%2Fsvg%3E') no-repeat center center;\n      background-size: 65px;\n      content: '';\n      display: block;\n      height: 50px;\n      left: -5px;\n      position: absolute;\n      top: -53px;\n      width: 50px;\n\n      @include breakpoint(phablet) {\n        left: 0;\n      }\n\n      @include breakpoint(tablet) {\n        height: 50px;\n        top: -60px;\n        width: 50px;\n      }\n\n      @include breakpoint(laptop) {\n        background-size: 85px;\n        height: 80px;\n        left: -95px;\n        top: -1px;\n        width: 80px;\n      }\n    }\n  }\n}\n\n\n// end of file\n","@import 'helpers/rem';\n@import 'variables.private';\n@import 'x.tier-1';\n\n// public variables\n\n// colors\n// THESE ARE ALL DEPRECATED - WILL REPLACE THEM LATER\n$white: map-get($color-neutral, 'white');\n$very-light-gray: map-get($color-neutral, 'very-light-gray');\n$light-gray: map-get($color-neutral, 'light-gray');\n$gray: map-get($color-neutral, 'gray');\n$dark-gray: map-get($color-neutral, 'dark-gray');\n$very-dark-gray: map-get($color-neutral, 'very-dark-gray');\n$black: map-get($color-neutral, 'black');\n$red: map-get($color-utility, 'alert');\n$alert: $red;\n$private-irc-yellow: map-get($color-brand, 'primary');\n$primary-color: $private-irc-yellow;\n$standard-overlay-treatment: rgba(0, 0, 0, .5);\n\n// font weights\n$strong: map-get($font-weight, 'bold');\n\n$standard-gutter: 1rem;\n$standard-horizontal-margin-accounting-for-gutters: 2 * $standard-gutter;\n$private-row-gutter: $standard-gutter; // kept distinct from the standard gutter as i can see this changing to 2rem\n$well-width-inner: rem(1208px);\n$max-row-width: $well-width-inner + ($standard-gutter * 2);\n\n$smallest-desktop-size: $max-row-width;\n$smallest-desktop-size-less-gutters: $well-width-inner - rem(1px);\n$smallest-laptop-size: rem(1024px);\n$smallest-tablet-size: rem(768px);\n$smallest-phablet-size: rem(641px);\n\n// The default font family.\n$base-font-family: $font-family-sans-serif;\n\n$body-background-color: $very-light-gray;\n\n// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n//\n// Vertical Rhythm\n//\n// TAKEN FROM https://github.com/JohnAlbin/normalize-scss\n//\n// This is the minimal amount of code needed to create vertical rhythm in our\n// CSS. If you are looking for a robust solution, look at the excellent Typey\n// library. @see https://github.com/jptaranto/typey\n\n@function normalize-rhythm($value, $relative-to: $base-font-size, $unit: $base-unit) {\n  @if unit($value) != px {\n    @error 'The normalize vertical-rhythm module only supports px inputs. The typey library is better.';\n  }\n  @if $unit == rem {\n    @return ($value / $base-font-size) * 1rem;\n  } @else if $unit == em {\n    @return ($value / $relative-to) * 1em;\n  } @else { // $unit == px\n    @return $value;\n  }\n}\n\n@mixin normalize-font-size($value, $relative-to: $base-font-size) {\n  @if unit($value) != 'px' {\n    @error 'normalize-font-size() only supports px inputs. The typey library is better.';\n  }\n  font-size: normalize-rhythm($value, $relative-to);\n}\n\n@mixin normalize-rhythm($property, $values, $relative-to: $base-font-size) {\n  $value-list: $values;\n  $sep: space;\n  @if type-of($values) == 'list' {\n    $sep: list-separator($values);\n  } @else {\n    $value-list: append((), $values);\n  }\n\n  $normalized-values: ();\n  @each $value in $value-list {\n    @if unitless($value) and $value != 0 {\n      $value: $value * normalize-rhythm($base-line-height, $relative-to);\n    }\n    $normalized-values: append($normalized-values, $value, $sep);\n  }\n  #{$property}: $normalized-values;\n}\n\n@mixin normalize-margin($values, $relative-to: $base-font-size) {\n  @include normalize-rhythm(margin, $values, $relative-to);\n}\n\n@mixin normalize-line-height($font-size, $min-line-padding: 2px) {\n  $lines: ceil($font-size / $base-line-height);\n  // If lines are cramped include some extra leading.\n  @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {\n    $lines: $lines + 1;\n  }\n  @include normalize-rhythm(line-height, $lines, $font-size);\n}\n\n// end of file\n","//\n// Tier 1 variables\n//\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n$irc-yellow: #fdc513;\n$irc-yellow-tint-1: #ffd44b;\n$irc-yellow-tint-2: #ffd960;\n\n$color-brand: (\n  primary: $irc-yellow,\n  primary-highlight-1: $irc-yellow-tint-1,\n  primary-highlight-2: $irc-yellow-tint-2,\n);\n$color-brand-x: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', $color-brand, (prefix: '{ \"color_brand\":', suffix: '}'));\n\n// sass-lint:disable no-color-keywords\n$color-neutral: (\n  'white': #fff,\n  'very-light-gray': #f6f6f6,\n  'light-gray': #e9e9e9,\n  'gray': #d1d1d1,\n  'dark-gray': #666,\n  'very-dark-gray': #383838,\n  'black': #000,\n);\n$color-neutral-x: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', $color-neutral, (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n$red: #ee2d14;\n\n$color-utility: (\n  alert: $red,\n);\n$color-utility-x: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', $color-utility, (prefix: '{ \"color_utility\":', suffix: '}'));\n\n//\n// Font size\n//\n$font-size: (\n  m: 1.125rem, // 18px\n  m-1: 1.25rem, // 20px\n  l: 1.625rem,  // 26px\n  l-1: 2.25rem,  // 36px\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$font-size-x: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', $font-size, (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n$line-height: (\n  s: 1,\n  s-1: 1.2,\n  m: 1.6,\n  m-1: 1.75,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$line-height-x: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', $line-height, (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n$letter-spacing: (\n  compact: -.03em,\n  standard: -.01em,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$letter-spacing-x: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', $letter-spacing, (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n$font-weight: (\n  light: 300,\n  normal: 400,\n  bold: 700,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$font-weight-x: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', $font-weight, (prefix: '{ \"font_weight\":', suffix: '}'));\n\n// end of file\n"]}