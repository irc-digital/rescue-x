{"version":3,"sources":["10-layouts/30-hero-layouts/10-hero-layout-2/rpll-hero-layout-2.scss","../scss/abstract/_mixins.scss"],"names":[],"mappings":"AAEA,oBAGE,iBAAA,KAEA,8CALF,oBAMI,iBAAA,aAGF,wCACE,MAAA,KAGF,mCACE,YAAA,EAGF,8CAjBF,oBAkBI,SAAA,SAlBJ,4DAqBM,iBAAA,eACA,OAAA,EACA,SAAA,SACA,MAAA,KAxBN,sDCUE,YAAA,KACA,aAAA,KACA,UAAA,QACA,aAAA,KACA,cAAA,KDeI,QAAA,KACA,gBAAA,KACA,oBAAA,UAAA,YACA,sBAAA,IAAA","file":"rpll-hero-layout-2.css","sourcesContent":["@import 'rpll-hero-layout-2.variables';\n\n.rpll-hero-layout-2 {\n  $self: &;\n\n  background-color: $hero-2-text-area-text-background;\n\n  @media only screen and (min-width: #{$hero-layout-2-smallest-large-device-size}) {\n    background-color: transparent;\n  }\n\n  &__outer-text-wrapper {\n    color: get-neutral-color('white');\n  }\n\n  &__image-wrapper {\n    line-height: 0;\n  }\n\n  @media only screen and (min-width: #{$hero-layout-2-smallest-large-device-size}) {\n    position: relative;\n\n    #{$self}__outer-text-wrapper {\n      background-color: $hero-2-text-area-overlay-treatment;\n      bottom: 0;\n      position: absolute;\n      width: 100%;\n    }\n\n    #{$self}__text-wrapper {\n      @include standard-row;\n      display: grid;\n      grid-column-gap: $hero-2-text-column-gap;\n      grid-template-areas: 'primary' 'secondary';\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n}\n\n\n// end of file\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n"]}