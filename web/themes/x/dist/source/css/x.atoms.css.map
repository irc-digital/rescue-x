{"version":3,"sources":["base/_base.scss","x.tier-1.scss","x.tier-2.scss","../_patterns/01-atoms/05-buttons/rpla-button.scss","../_patterns/01-atoms/03-links/10-link-icon/rpla-link-icon.scss","../_patterns/01-atoms/07-responsive-title/rpla-responsive-title.scss","../_patterns/01-atoms/15-images/20-icon/_rpla-icon.scss","../_patterns/01-atoms/20-social-share/05-standard/rpla-social-share-default.scss","helpers/_rem.scss","../_patterns/01-atoms/20-social-share/05-standard/_rpla-social-share-default.variables.scss","../_patterns/03-molecules/20-section-heading/rplm-section-heading.scss","abstract/_mixins.scss","_core.scss","../_patterns/03-molecules/20-section-heading/_rplm-section-heading.variables.scss"],"names":[],"mappings":"AAEA;EC4DE,oBATW;EAuCX,wBANgB;EARhB,iBAPM,EDnEP;EEQC;IFVF;MC4DE,mBARY;MAwBZ,kBANS,EDpEV,EAAA;;AGFD;EAGE,0BFSgB;EERhB,4BAAoB;EAApB,4BAAoB;EAApB,qBAAoB;EACpB,sBAAqB,EAYtB;EAVC;IACE,aAAY;IACZ,YAAW,EACZ;EAEA;IAEG,6BAAQ;QAAR,kBAAQ;YAAR,SAAQ,EACT;;ACfL;EAGE,sBAAqB,EAMtB;EAJC;IACE,aAAY;IACZ,YAAW,EACZ;;ACND;EACE,mBAAkB;EAClB,iBAAgB,EACjB;;AAED;EACE,mBAAkB,EACnB;;AAED;EACE,mBAAkB;EAClB,iBAAgB,EACjB;;AAED;EACE,kBAAiB;EACjB,iBAAgB,EACjB;;AAED;EACE,mBAAkB;EAClB,iBAAgB,EACjB;;ACxBH;EACE,aAAY;EACZ,YAAW,EACZ;;ACFC;EACE,0BNwBmB;EMvBnB,oBAAmB;EACnB,sBAAqB;EACrB,aC6BwD;ED5BxD,qBEL+C;EFM/C,mBC2BwD;ED1BxD,YC0BwD,EDzBzD;;AGTH;ECUE,kBAAiB;EACjB,mBAAkB;EAClB,mBCewD;EDdxD,mBCUoB;EDTpB,oBCSoB,EFIrB;EAtBC;ITuDA,oBAPW;IAoDX,iBANS;IATT,wBAPe;IAPf,iBARQ;IS7DN,+BTKc;ISJd,sBAAqB;IACrB,qBAAoB;IACpB,mBGTqC;IHUrC,kBAAiB,EAClB;IRUD;MQjBA;QTuDA,mBANY,ES1CX,EAAA;EAED;IACE,sBAAqB;IACrB,WTcW;ISbX,aAAY;IACZ,mBAAkB;IAClB,YAAW,EACZ;EAEA;IAEG,mBTAS,ESCV","file":"x.atoms.css","sourcesContent":["@import '../x.tier-2';\n\nbody {\n  @include typography-body;\n}\n\n// end of file\n","//\n// Tier 1 variables\n//\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n$color-brand: (\n  primary: #fdc513,\n  primary-tint-1: #ffd44b,\n  primary-tint-2: #ffd960,\n);\n$color-brand-x: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', $color-brand, (prefix: '{ \"color_brand\":', suffix: '}'));\n\n@function get-brand-color($option: 'primary') {\n  @return map-get($color-brand, $option);\n}\n\n// sass-lint:disable no-color-keywords\n$color-neutral: (\n  'white': #fff,\n  'very-light-gray': #f6f6f6,\n  'light-gray': #e9e9e9,\n  'gray': #d1d1d1,\n  'dark-gray': #666,\n  'very-dark-gray': #383838,\n  'black': #000,\n);\n$color-neutral-x: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', $color-neutral, (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n@function get-neutral-color($option: 'gray') {\n  @return map-get($color-neutral, $option);\n}\n\n$color-utility: (\n  alert: #ee2d14,\n);\n$color-utility-x: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', $color-utility, (prefix: '{ \"color_utility\":', suffix: '}'));\n\n@function get-utility-color($option: 'alert') {\n  @return map-get($color-utility, $option);\n}\n\n//\n// Font size\n//\n$font-size: (\n  m: 1.125rem, // 18px\n  m-1: 1.25rem, // 20px\n  l: 1.625rem,  // 26px\n  l-1: 2.25rem,  // 36px\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$font-size-x: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', $font-size, (prefix: '{ \"font_size\":', suffix: '}'));\n\n@mixin font-size($option: 'm') {\n  font-size: map-get($font-size, $option);\n}\n\n//\n// Line height\n//\n$line-height: (\n  s: 1,\n  s-1: 1.2,\n  m: 1.6,\n  m-1: 1.75,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$line-height-x: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', $line-height, (prefix: '{ \"line_height\":', suffix: '}'));\n\n@mixin line-height($option: 'm') {\n  line-height: map-get($line-height, $option);\n}\n\n//\n// Letter spacing\n//\n$letter-spacing: (\n  compact: -.03em,\n  standard: -.01em,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$letter-spacing-x: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', $letter-spacing, (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: map-get($letter-spacing, $option);\n}\n\n//\n// Font weight\n//\n$font-weight: (\n  light: 300,\n  normal: 400,\n  bold: 700,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$font-weight-x: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', $font-weight, (prefix: '{ \"font_weight\":', suffix: '}'));\n\n@mixin font-weight($option: 'normal') {\n  font-weight: map-get($font-weight, $option);\n}\n\n// end of file\n\n","//\n// Tier 2 variables\n//\n\n@import 'x.tier-1';\n@import 'abstract/mixins';\n\n@mixin typography-body {\n  @include font-size('m');\n  @include letter-spacing('standard');\n  @include line-height('m');\n\n  @media only screen and (min-width: 641px) {\n    @include font-size('m-1');\n    @include line-height('m-1');\n  }\n}\n\n@mixin typography-heading-large {\n  @include font-size('l');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @media only screen and (min-width: 641px) {\n    @include font-size('l-1');\n  }\n}\n\n// end of file\n","@import 'rpla-button.variables';\n\n.rpla-button {\n  $self: &;\n\n  background-color: $button-background-color;\n  display: inline-flex;\n  text-decoration: none;\n\n  &__icon {\n    height: 24px; // temp\n    width: 24px; // temp\n  }\n\n  &--icon-position-before {\n    #{$self}__text {\n      order: 2;\n    }\n  }\n}\n","@import 'rpla-link-icon.variables';\n\n.rpla-link-icon {\n  $self: &;\n\n  text-decoration: none;\n\n  &__icon {\n    height: 24px; // temp\n    width: 24px; // temp\n  }\n}\n","@import 'rpla-responsive-title.variables';\n\n.rpla-responsive-title {\n  //TODO - THESE ARE JUST PLACEHOLDERS UNTIL WE FIGURE OUT COMMON HEADING STYLE NAMES\n  &--short {\n    font-size: 3.75rem;\n    line-height: 1.2;\n  }\n\n  &--medium {\n    font-size: 3.25rem;\n  }\n\n  &--long {\n    font-size: 3.25rem;\n    line-height: 1.1;\n  }\n\n  &--very-long {\n    font-size: 2.5rem;\n    line-height: 1.1;\n  }\n\n  &--super-long {\n    font-size: 2.25rem;\n    line-height: 1.2;\n  }\n}\n\n// end of file\n\n","@import 'rpla-icon.variables';\n\n.rpla-icon {\n  height: 100%;\n  width: 100%;\n}\n\n// end of file\n","@import 'rpla-social-share-default.variables';\n\n.rpla-social-share-standard {\n  &__link {\n    border: 1px solid get-neutral-color('light-gray');\n    border-radius: 100%;\n    display: inline-block;\n    height: $social-share-standard-width-height;\n    margin-right: $social-share-standard-gutter;\n    padding: $social-share-standard-padding-around-icon;\n    width: $social-share-standard-width-height;\n  }\n}\n\n// end of file\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n","@import '../../../../scss/core';\n\n$social-share-standard-width-height: rem(48px);\n$social-share-standard-gutter: $standard-gutter / 2;\n$social-share-standard-padding-around-icon: rem(15px);\n\n// end of file\n\n","@import 'rplm-section-heading.variables';\n\n.rplm-section-heading {\n  $self: &;\n\n  @include standard-row;\n\n  &__title {\n    @include typography-heading-large;\n    border-left: $section-heading-left-border-width solid get-brand-color();\n    display: inline-block;\n    padding-bottom: 10px;\n    padding-left: $section-heading-title-left-padding;\n    padding-top: 10px;\n  }\n\n  &__icon {\n    display: inline-block;\n    fill: get-neutral-color('black');\n    height: 32px;\n    margin-right: 24px;\n    width: 32px;\n  }\n\n  &--inverse {\n    #{ $self }__title {\n      border-color: $section-heading-inverse-left-border-color;\n    }\n  }\n}\n\n// end of file\n\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n","@import 'helpers/rem';\n@import 'abstract/mixins';\n@import 'x.tier-1';\n@import 'x.tier-2';\n\n// public variables\n\n// colors\n// THESE ARE ALL DEPRECATED - WILL REPLACE THEM LATER\n//$white: map-get($color-neutral, 'white');\n//$very-light-gray: map-get($color-neutral, 'very-light-gray');\n//$light-gray: map-get($color-neutral, 'light-gray');\n//$gray: map-get($color-neutral, 'gray');\n//$dark-gray: map-get($color-neutral, 'dark-gray');\n//$very-dark-gray: map-get($color-neutral, 'very-dark-gray');\n//$black: map-get($color-neutral, 'black');\n//$red: map-get($color-utility, 'alert');\n//$alert: $red;\n//$private-irc-yellow: map-get($color-brand, 'primary');\n//get-brand-color(): $private-irc-yellow;\n$standard-overlay-treatment: rgba(0, 0, 0, .5);\n\n// font weights\n$strong: map-get($font-weight, 'bold');\n\n$standard-gutter: 1rem;\n$standard-horizontal-margin-accounting-for-gutters: 2 * $standard-gutter;\n$private-row-gutter: $standard-gutter; // kept distinct from the standard gutter as i can see this changing to 2rem\n$well-width-inner: rem(1208px);\n$max-row-width: $well-width-inner + ($standard-gutter * 2);\n\n$smallest-desktop-size: $max-row-width;\n$smallest-desktop-size-less-gutters: $well-width-inner - rem(1px);\n$smallest-laptop-size: rem(1024px);\n$smallest-tablet-size: rem(768px);\n$smallest-phablet-size: rem(641px);\n\n// The default font family.\n$base-font-family: $font-family-sans-serif;\n\n$body-background-color: get-neutral-color('very-light-gray');\n\n\n// end of file\n","@import '../../../scss/core';\n\n$section-heading-left-border-width: 6px;\n$section-heading-title-left-padding: 24px;\n$section-heading-title-font-weight: 700;\n$section-heading-inverse-left-border-color: get-neutral-color('white');\n"]}