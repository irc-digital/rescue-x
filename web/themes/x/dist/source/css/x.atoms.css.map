{"version":3,"sources":["../_patterns/01-atoms/05-buttons/rpla-button.scss","_variables.scss","../_patterns/01-atoms/03-links/10-link-icon/rpla-link-icon.scss","../_patterns/01-atoms/07-responsive-title/rpla-responsive-title.scss","../_patterns/01-atoms/15-images/20-icon/_rpla-icon.scss","../_patterns/01-atoms/20-social-share/05-standard/rpla-social-share-default.scss","helpers/_rem.scss","../_patterns/01-atoms/20-social-share/05-standard/_rpla-social-share-default.variables.scss","../_patterns/03-molecules/20-section-heading/rplm-section-heading.scss","../_patterns/03-molecules/20-section-heading/_rplm-section-heading.variables.scss"],"names":[],"mappings":"AAEA;EAGE,0BCU0B;EDT1B,4BAAoB;EAApB,4BAAoB;EAApB,qBAAoB;EACpB,sBAAqB,EAYtB;EAVC;IACE,aAAY;IACZ,YAAW,EACZ;EAEA;IAEG,6BAAQ;QAAR,kBAAQ;YAAR,SAAQ,EACT;;AEfL;EAGE,sBAAqB,EAMtB;EAJC;IACE,aAAY;IACZ,YAAW,EACZ;;ACND;EACE,mBAAkB;EAClB,iBAAgB,EACjB;;AAED;EACE,mBAAkB,EACnB;;AAED;EACE,mBAAkB;EAClB,iBAAgB,EACjB;;AAED;EACE,kBAAiB;EACjB,iBAAgB,EACjB;;AAED;EACE,mBAAkB;EAClB,iBAAgB,EACjB;;ACxBH;EACE,aAAY;EACZ,YAAW,EACZ;;ACFC;EACE,0BJIgB;EIHhB,oBAAmB;EACnB,sBAAqB;EACrB,aC6BwD;ED5BxD,qBEL+C;EFM/C,mBC2BwD;ED1BxD,YC0BwD,EDzBzD;;AGTH;EPqDE,kBAAiB;EACjB,mBAAkB;EAClB,mBA3BwD;EA4BxD,mBAhCoB;EAiCpB,oBAjCoB,EOMrB;EAzBC;IACE,+BPOwB;IONxB,sBAAqB;IACrB,gBCNkC;IDOlC,iBCNmC;IDOnC,uBAAsB;IACtB,iBAAgB;IAChB,qBAAoB;IACpB,mBCZqC;IDarC,kBAAiB,EAClB;EAED;IACE,sBAAqB;IACrB,WPTQ;IOUR,aAAY;IACZ,mBAAkB;IAClB,YAAW,EACZ;EAEA;IAEG,mBPvBM,EOwBP","file":"x.atoms.css","sourcesContent":["@import 'rpla-button.variables';\n\n.rpla-button {\n  $self: &;\n\n  background-color: $button-background-color;\n  display: inline-flex;\n  text-decoration: none;\n\n  &__icon {\n    height: 24px; // temp\n    width: 24px; // temp\n  }\n\n  &--icon-position-before {\n    #{$self}__text {\n      order: 2;\n    }\n  }\n}\n","@import 'helpers/rem';\n@import 'variables.private';\n\n// public variables\n\n// colors\n$white: #fff;\n$very-light-gray: #f6f6f6;\n$light-gray: #e9e9e9;\n$gray: #d1d1d1;\n$dark-gray: #666;\n$very-dark-gray: #383838;\n$black: #000;\n$red: #ee2d14;\n$alert: $red;\n$private-irc-yellow: #fdc513;\n$primary-color: $private-irc-yellow;\n$standard-overlay-treatment: rgba(0, 0, 0, .5);\n\n// font weights\n$strong: 700;\n\n//#FFD960\n//#FFD44B\n\n\n$standard-gutter: 1rem;\n$standard-horizontal-margin-accounting-for-gutters: 2 * $standard-gutter;\n$private-row-gutter: $standard-gutter; // kept distinct from the standard gutter as i can see this changing to 2rem\n$well-width-inner: rem(1208px);\n$max-row-width: $well-width-inner + ($standard-gutter * 2);\n\n$smallest-desktop-size: $max-row-width;\n$smallest-desktop-size-less-gutters: $well-width-inner - rem(1px);\n$smallest-laptop-size: rem(1024px);\n$smallest-tablet-size: rem(768px);\n$smallest-phablet-size: rem(641px);\n\n// The default font family.\n$base-font-family: akzidenz-grotesk, Arial, sans-serif;\n\n$body-background-color: $very-light-gray;\n\n// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n//\n// Vertical Rhythm\n//\n// TAKEN FROM https://github.com/JohnAlbin/normalize-scss\n//\n// This is the minimal amount of code needed to create vertical rhythm in our\n// CSS. If you are looking for a robust solution, look at the excellent Typey\n// library. @see https://github.com/jptaranto/typey\n\n@function normalize-rhythm($value, $relative-to: $base-font-size, $unit: $base-unit) {\n  @if unit($value) != px {\n    @error 'The normalize vertical-rhythm module only supports px inputs. The typey library is better.';\n  }\n  @if $unit == rem {\n    @return ($value / $base-font-size) * 1rem;\n  } @else if $unit == em {\n    @return ($value / $relative-to) * 1em;\n  } @else { // $unit == px\n    @return $value;\n  }\n}\n\n@mixin normalize-font-size($value, $relative-to: $base-font-size) {\n  @if unit($value) != 'px' {\n    @error 'normalize-font-size() only supports px inputs. The typey library is better.';\n  }\n  font-size: normalize-rhythm($value, $relative-to);\n}\n\n@mixin normalize-rhythm($property, $values, $relative-to: $base-font-size) {\n  $value-list: $values;\n  $sep: space;\n  @if type-of($values) == 'list' {\n    $sep: list-separator($values);\n  } @else {\n    $value-list: append((), $values);\n  }\n\n  $normalized-values: ();\n  @each $value in $value-list {\n    @if unitless($value) and $value != 0 {\n      $value: $value * normalize-rhythm($base-line-height, $relative-to);\n    }\n    $normalized-values: append($normalized-values, $value, $sep);\n  }\n  #{$property}: $normalized-values;\n}\n\n@mixin normalize-margin($values, $relative-to: $base-font-size) {\n  @include normalize-rhythm(margin, $values, $relative-to);\n}\n\n@mixin normalize-line-height($font-size, $min-line-padding: 2px) {\n  $lines: ceil($font-size / $base-line-height);\n  // If lines are cramped include some extra leading.\n  @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {\n    $lines: $lines + 1;\n  }\n  @include normalize-rhythm(line-height, $lines, $font-size);\n}\n\n// end of file\n","@import 'rpla-link-icon.variables';\n\n.rpla-link-icon {\n  $self: &;\n\n  text-decoration: none;\n\n  &__icon {\n    height: 24px; // temp\n    width: 24px; // temp\n  }\n}\n","@import 'rpla-responsive-title.variables';\n\n.rpla-responsive-title {\n  //TODO - THESE ARE JUST PLACEHOLDERS UNTIL WE FIGURE OUT COMMON HEADING STYLE NAMES\n  &--short {\n    font-size: 3.75rem;\n    line-height: 1.2;\n  }\n\n  &--medium {\n    font-size: 3.25rem;\n  }\n\n  &--long {\n    font-size: 3.25rem;\n    line-height: 1.1;\n  }\n\n  &--very-long {\n    font-size: 2.5rem;\n    line-height: 1.1;\n  }\n\n  &--super-long {\n    font-size: 2.25rem;\n    line-height: 1.2;\n  }\n}\n\n// end of file\n\n","@import 'rpla-icon.variables';\n\n.rpla-icon {\n  height: 100%;\n  width: 100%;\n}\n\n// end of file\n","@import 'rpla-social-share-default.variables';\n\n.rpla-social-share-standard {\n  &__link {\n    border: 1px solid $light-gray;\n    border-radius: 100%;\n    display: inline-block;\n    height: $social-share-standard-width-height;\n    margin-right: $social-share-standard-gutter;\n    padding: $social-share-standard-padding-around-icon;\n    width: $social-share-standard-width-height;\n  }\n}\n\n// end of file\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n","@import '../../../../scss/variables';\n\n$social-share-standard-width-height: rem(48px);\n$social-share-standard-gutter: $standard-gutter / 2;\n$social-share-standard-padding-around-icon: rem(15px);\n\n// end of file\n\n","@import 'rplm-section-heading.variables';\n\n.rplm-section-heading {\n  $self: &;\n\n  @include standard-row;\n\n  &__title {\n    border-left: $section-heading-left-border-width solid $primary-color;\n    display: inline-block;\n    font-size: $section-heading-title-font-size;\n    font-weight: $section-heading-title-font-weight;\n    letter-spacing: -1.2px;\n    line-height: 1.2;\n    padding-bottom: 10px;\n    padding-left: $section-heading-title-left-padding;\n    padding-top: 10px;\n  }\n\n  &__icon {\n    display: inline-block;\n    fill: $black;\n    height: 32px;\n    margin-right: 24px;\n    width: 32px;\n  }\n\n  &--inverse {\n    #{ $self }__title {\n      border-color: $section-heading-inverse-left-border-color;\n    }\n  }\n}\n\n// end of file\n\n","@import '../../../scss/variables';\n\n$section-heading-left-border-width: 6px;\n$section-heading-title-left-padding: 24px;\n$section-heading-title-font-size: 36px;\n$section-heading-title-font-weight: 700;\n$section-heading-inverse-left-border-color: $white;\n"]}