{"version":3,"sources":["base/_reset.scss","x.atoms.css","base/_base.scss","_x.tier-1.scss","abstract/_mixins.scss","../_patterns/01-atoms/01-text/05-paragraph/_rpla-paragraph.scss","../_patterns/01-atoms/05-buttons/rpla-button.scss","../_patterns/01-atoms/03-links/05-link/rpla-link.scss","_x.tier-2.scss","../_patterns/01-atoms/03-links/10-link-icon/rpla-link-icon.scss","../_patterns/01-atoms/07-responsive-title/rpla-responsive-title.scss","../_patterns/01-atoms/15-images/20-icon/_rpla-icon.scss","../_patterns/01-atoms/20-social-share/05-standard/rpla-social-share-default.scss","../_patterns/03-molecules/20-section-heading/rplm-section-heading.scss"],"names":[],"mappings":"AAOA,EACE,mBAAA,WAAA,WAAA,WCQF,WAXA,KACA,IAsBA,OAHA,OALA,KAXA,GACA,GACA,GACA,GACA,GACA,GAUA,ODVA,KCNA,OAcA,MADA,OAFA,GAOA,IAnBA,OAUA,GAFA,EAYA,QAJA,MALA,GDqBE,OAAA,EACA,QAAA,ECJF,QACA,OAJA,ODaA,OCZA,IACA,QDiBE,QAAA,MElDF,KACE,YAAA,gBAAA,CAAA,KAAA,CAAA,SAAA,CAAA,WAGF,KC+GE,UAAA,SA8EA,YAAA,IAzBA,eAAA,OAxBA,YAAA,ID1IA,MAAA,KEsCE,8CFxCJ,KC+GE,UAAA,QA6BA,YAAA,MDvIF,EACE,MAAA,KGTA,sBFkHA,UAAA,QCvEE,8CC3CF,sBFkHA,UAAA,OA6BA,YAAA,KGhJF,aAGE,iBAAA,QACA,QAAA,mBAAA,QAAA,mBAAA,QAAA,YACA,gBAAA,KAEA,mBACE,OAAA,KACA,MAAA,KAGD,sDAEG,0BAAA,EAAA,eAAA,EAAA,MAAA,ECdN,0CJiME,YAAA,IK5JA,cAAA,IAAA,MAAA,QACA,QAAA,OAEA,gDACE,iBAAA,QDlCF,wBJ0LA,YAAA,IKlJA,cAAA,IAAA,MAAA,QACA,QAAA,OAEA,8BACE,MAAA,QDxCF,0BJsLA,YAAA,IKxIA,cAAA,IAAA,MAAA,KACA,QAAA,OAEA,gCACE,iBAAA,KD9CF,uBJoGA,UAAA,QCvEE,8CG7BF,uBJoGA,UAAA,MMnHF,gBAGE,gBAAA,KAEA,sBACE,OAAA,KACA,MAAA,KCLF,8BACE,UAAA,QACA,YAAA,IAGF,+BACE,UAAA,QAGF,6BACE,UAAA,QACA,YAAA,IAGF,kCACE,UAAA,OACA,YAAA,IAGF,mCACE,UAAA,QACA,YAAA,ICvBJ,WACE,OAAA,KACA,MAAA,KCDA,kCACE,OAAA,IAAA,MAAA,QACA,cAAA,KACA,QAAA,aACA,OAAA,KACA,aAAA,MACA,QAAA,SACA,MAAA,KCRJ,sBTUE,YAAA,KACA,aAAA,KACA,UAAA,QACA,aAAA,KACA,cAAA,KSTA,6BV8GA,UAAA,OA8EA,YAAA,IAzBA,eAAA,OAxBA,YAAA,IUzIE,YAAA,IAAA,MAAA,QACA,QAAA,aACA,eAAA,KACA,aAAA,KACA,YAAA,KTiCA,8CSvCF,6BV8GA,UAAA,SUrGA,4BACE,QAAA,aACA,KAAA,KACA,OAAA,KACA,aAAA,KACA,MAAA,KAGD,4DAEG,aAAA","file":"x.atoms.css","sourcesContent":["//------------------------------------\n//    #RESET\n//------------------------------------\n\n//\n// Border-Box http:/paulirish.com/2012/box-sizing-border-box-ftw/\n// /\n* {\n  box-sizing: border-box;\n}\n\n//\n// 1) Zero out margins and padding for elements\n//\nhtml,\nbody,\ndiv,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\nol,\nul,\nli,\nform,\nlegend,\nlabel,\ntable,\nheader,\nfooter,\nnav,\nsection,\nfigure {\n  margin: 0;\n  padding: 0;\n}\n\n//\n// 1) Set HTML5 elements to display: block\n//\nheader,\nfooter,\nnav,\nsection,\narticle,\nfigure {\n  display: block;\n}\n\n// end of file\n",null,"@import '../x.tier-2';\n\nhtml {\n  font-family: $font-family-sans-serif;\n}\n\nbody {\n  @include typography-text-standard;\n  color: get-neutral-color('black');\n}\n\na {\n  color: get-neutral-color('black');\n}\n\n// end of file\n","//\n// Tier 1 variables\n//\n// The main purpose of tier 1 is to set out the values for single CSS properties concepts, such as font size and color.\n//\n// This file is, essentially, a bunch of enumerations and represent the very core building blocks of the visual system.\n//\n// The enumerations are deliberately a little obfuscates to avoid direct array access. Access should all go through\n// the specific accessor function and/or mixin provided for each.\n//\n//\n\n@function safe-map-get($map, $option) {\n  @if map-has-key($map, $option) {\n    @return map-get($map, $option);\n  } @else {\n    @error '#{$map} does not contain the key #{$option}';\n    @return null;\n  }\n}\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n//\n// Function to get a brand color\n//\n@function get-brand-color($option: 'primary') {\n  $brand-colors: (\n    'primary': #fdc513,\n    'primary-tint-1': #ffd44b,\n    'primary-tint-2': #ffd960,\n  );\n\n  @if $option != 'all' {\n    @return safe-map-get($brand-colors, $option);\n  } @else {\n    @return $brand-colors;\n  }\n}\n\n// generates a JSON array of brand colors to be used by PatternLab\n$xxx-bc: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', get-brand-color('all'), (prefix: '{ \"color_brand\":', suffix: '}'));\n\n//\n// Function to get a neutral color\n//\n@function get-neutral-color($option: 'gray') {\n  $neutral-colors: (\n    'white': #fff,\n    'very-light-gray': #f6f6f6,\n    'light-gray': #e9e9e9,\n    'gray': #d1d1d1,\n    'dark-gray': #666,\n    'very-dark-gray': #383838,\n    'black': #000,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($neutral-colors, $option);\n  } @else {\n    @return $neutral-colors;\n  }\n}\n\n// generates a JSON array of neutral colors to be used by PatternLab\n$xxx-nc: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', get-neutral-color('all'), (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n//\n// Function to get a utility color\n//\n@function get-utility-color($option: 'alert') {\n  $utility-colors: (\n    'alert': #ee2d14,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($utility-colors, $option);\n  } @else {\n    @return $utility-colors;\n  }\n}\n// generates a JSON array of utility colors to be used by PatternLab\n$xxx-uc: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', get-utility-color('all'), (prefix: '{ \"color_utility\":', suffix: '}'));\n\n\n//\n// Font size\n//\n\n// Function to get a font size value from its array entry key\n@function get-font-size($option: 'm') {\n  $font-sizes: (\n    'xxs': rem(12px),\n    'xs': rem(14px),\n    's': rem(16px),\n    'm': rem(18px),\n    'ml': rem(20px),\n    'l': rem(24px),\n    'xl': rem(28px),\n    'xxl': rem(36px),\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-sizes, $option);\n  } @else {\n    @return $font-sizes;\n  }\n}\n\n//\n// Font size mixin\n//\n@mixin font-size($option: 'm') {\n  font-size: get-font-size($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fs: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', get-font-size('all'), (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n\n// Function to get a line height value from its array entry key\n@function get-line-height($option: 'm') {\n  $line-heights: (\n    's': 1,\n    's-1': 1.2,\n    'm': 1.6,\n    'm-1': 1.75,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($line-heights, $option);\n  } @else {\n    @return $line-heights;\n  }\n}\n\n//\n// Line height mixin\n//\n@mixin line-height($option: 'm') {\n  line-height: get-line-height($option);\n}\n\n// generates a JSON array of line heights to be used by PatternLab\n$xxx-lh: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', get-line-height('all'), (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n\n// Function to get a letter spacing value from its array entry key\n@function get-letter-spacing($option: 'm') {\n  $letter-spacings: (\n    'compact': -.03em,\n    'standard': -.01em,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($letter-spacings, $option);\n  } @else {\n    @return $letter-spacings;\n  }\n}\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: get-letter-spacing($option);\n}\n\n// generates a JSON array of letter spacing to be used by PatternLab\n$xxx-ls: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', get-letter-spacing('all'), (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n\n// Function to get a font weight value from its array entry key\n@function get-font-weight($option: 'm') {\n  $font-weights: (\n    'light': 300,\n    'normal': 400,\n    'bold': 700,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-weights, $option);\n  } @else {\n    @return $font-weights;\n  }\n}\n\n@mixin font-weight($option: 'normal') {\n  font-weight: get-font-weight($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fw: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', get-font-weight('all'), (prefix: '{ \"font_weight\":', suffix: '}'));\n\n\n// end of file\n\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n","@import 'rpla-paragraph.variables';\n\n.rpla-paragraph {\n  &--lead {\n    @include typography-text-large;\n  }\n}\n\n// end of file\n","@import 'rpla-button.variables';\n\n.rpla-button {\n  $self: &;\n\n  background-color: $button-background-color;\n  display: inline-flex;\n  text-decoration: none;\n\n  &__icon {\n    height: 24px; // temp\n    width: 24px; // temp\n  }\n\n  &--icon-position-before {\n    #{$self}__text {\n      order: 2;\n    }\n  }\n}\n","@import 'rpla-link.variables';\n\n.rpla-link {\n  $self: &;\n\n  &:not([class*='rpla-link--style']) {\n    @include typography-link-standard;\n  }\n\n  &--style-alert {\n    @include typography-link-alert;\n  }\n\n  &--style-inverse {\n    @include typography-link-inverse;\n  }\n\n  &--size-small {\n    @include typography-link-small;\n  }\n}\n","//\n// Tier 2 variables\n//\n\n@import 'x.tier-1';\n@import 'abstract/mixins';\n\n@mixin typography-text-standard {\n  @include font-size('m');\n  @include font-weight('light');\n  @include letter-spacing('standard');\n  @include line-height('m');\n\n  @include breakpoint(phablet) {\n    @include font-size('ml');\n    @include line-height('m-1');\n  }\n}\n\n@mixin typography-text-small {\n  @include font-size('s');\n  @include font-weight('light');\n\n  @include breakpoint(phablet) {\n    @include font-size('m');\n  }\n}\n\n@mixin typography-text-large {\n  @include font-size('ml');\n\n  @include breakpoint(phablet) {\n    @include font-size('l');\n    @include line-height('m');\n  }\n}\n\n@mixin typography-link-standard {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-brand-color();\n  display: inline;\n\n  &:hover {\n    background-color: get-brand-color();\n  }\n}\n\n@mixin typography-link-alert {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-utility-color('alert');\n  display: inline;\n\n  &:hover {\n    color: get-utility-color('alert');\n  }\n}\n\n@mixin typography-link-inverse {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-neutral-color('white');\n  display: inline;\n\n  &:hover {\n    background-color: get-neutral-color('white');\n  }\n}\n\n@mixin typography-link-small {\n  @include font-size('xs');\n\n  @include breakpoint(phablet) {\n    @include font-size('s');\n  }\n}\n\n@mixin typography-heading-large {\n  @include font-size('xl');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('xxl');\n  }\n}\n\n@mixin typography-heading-extra-large {\n  @include font-size('l');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('xxl');\n  }\n}\n\n// end of file\n","@import 'rpla-link-icon.variables';\n\n.rpla-link-icon {\n  $self: &;\n\n  text-decoration: none;\n\n  &__icon {\n    height: 24px; // temp\n    width: 24px; // temp\n  }\n}\n","@import 'rpla-responsive-title.variables';\n\n.rpla-responsive-title {\n  //TODO - THESE ARE JUST PLACEHOLDERS UNTIL WE FIGURE OUT COMMON HEADING STYLE NAMES\n  &--short {\n    font-size: 3.75rem;\n    line-height: 1.2;\n  }\n\n  &--medium {\n    font-size: 3.25rem;\n  }\n\n  &--long {\n    font-size: 3.25rem;\n    line-height: 1.1;\n  }\n\n  &--very-long {\n    font-size: 2.5rem;\n    line-height: 1.1;\n  }\n\n  &--super-long {\n    font-size: 2.25rem;\n    line-height: 1.2;\n  }\n}\n\n// end of file\n\n","@import 'rpla-icon.variables';\n\n.rpla-icon {\n  height: 100%;\n  width: 100%;\n}\n\n// end of file\n","@import 'rpla-social-share-default.variables';\n\n.rpla-social-share-standard {\n  &__link {\n    border: 1px solid get-neutral-color('light-gray');\n    border-radius: 100%;\n    display: inline-block;\n    height: $social-share-standard-width-height;\n    margin-right: $social-share-standard-gutter;\n    padding: $social-share-standard-padding-around-icon;\n    width: $social-share-standard-width-height;\n  }\n}\n\n// end of file\n","@import 'rplm-section-heading.variables';\n\n.rplm-section-heading {\n  $self: &;\n\n  @include standard-row;\n\n  &__title {\n    @include typography-heading-extra-large;\n    border-left: $section-heading-left-border-width solid get-brand-color();\n    display: inline-block;\n    padding-bottom: 10px;\n    padding-left: $section-heading-title-left-padding;\n    padding-top: 10px;\n  }\n\n  &__icon {\n    display: inline-block;\n    fill: get-neutral-color('black');\n    height: 32px;\n    margin-right: 24px;\n    width: 32px;\n  }\n\n  &--inverse {\n    #{ $self }__title {\n      border-color: $section-heading-inverse-left-border-color;\n    }\n  }\n}\n\n// end of file\n\n"]}