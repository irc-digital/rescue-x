{"version":3,"sources":["patternlab-scaffolding.scss","base/_base.scss","x.tier-1.scss","abstract/_rem.scss","abstract/_mixins.scss","_core.scss"],"names":[],"mappings":"AAAA;;;;GAIG;ACFH;EC+GE,oBC7E0D;EDkI1D,wBAVoB;EAdpB,iBAdU,ED5HX;EG0CG;IH5CJ;MC+GE,mBC7E0D;MD0G1D,kBAba,ED7Hd,EAAA;;AAFD;EC+GE,oBC7E0D;EDkI1D,wBAVoB;EAdpB,iBAdU,ED5HX;EG0CG;IH5CJ;MC+GE,mBC7E0D;MD0G1D,kBAba,ED7Hd,EAAA;;ADaD;;;;;;EILE,kBAAiB;EACjB,mBAAkB;EAClB,mBCDwD;EDExD,mBCNoB;EDOpB,oBCPoB,ELerB;;AAED;EACE,sBGS0D,EHR3D;;AIYG;EJVJ;IAEI,qBGIwD,EHF3D,EAAA;;AIMG;EJJJ;IAEI,sBKtB6D,ELwBhE,EAAA;;AAGC;EADF;IAEI,mBGRwD,EHU3D,EAAA;;AAGD;EACE,0CAAyC;EACjC,kCAAiC;EACzC,gBAAe;EACf,WAAU,EACX;;AAGD;EACE,+BAA8B;EAC9B,gCAA+B,EAChC;;AAGD;;;;;;;;;EAUI,2BAA0B;EAC1B,4BAA2B,EAC5B;;AAGH;EACE,uBExBe,EFyBhB;;AAGD;EACE,cAAa;EACb,mBAAkB;EAClB,YAAW,EAMZ;EI9CG;IJqCJ;MAMI,sCAAqC;MACrC,iCAAgC,EAEnC,EAAA;;AAED;EACE,cAAa;EACb,mBAAkB;EAClB,YAAW,EAMZ;EIzDG;IJgDJ;MAMI,sCAAqC;MACrC,iCAAgC,EAEnC,EAAA;;AAED;EACE,uBE7Ce;EF8Cf,wBAAuB;EACvB,cAAY;EACZ,mBAAkB;EAClB,mBAAiB,EAKlB;EAHC;IAPF;MAQI,8BAA6B,EAEhC,EAAA;;AAED;EACE,iBAAgB;EAChB,aAAY;EACZ,mBAAkB;EAClB,mBAAkB;EAClB,mBAAkB;EAClB,gBAAe,EAChB;;AAED;EACE,qBAAoB;EACpB,qBAAoB;EACpB,cAAa;EACb,oBAAmB;EACf,gBAAe;EACnB,4BAA2B;EAC3B,sBAAqB;EACrB,qBAAoB,EACrB;;AACD;EACE,oBAAmB;EACf,eAAc;EACV,WAAU;EAClB,eAAc;EACd,wBAAuB;EACvB,eAAc;EACd,gBAAe;EACf,uBAAsB;EACtB,mBAAkB,EACnB;;AAED;EACE,eAAc;EACd,YAAW;EACX,qBAAoB;EACpB,mBAAkB,EACnB;;AAED;EACE,eAAc;EACd,eAAc,EACf;;AAED;EACE,oBE9HoB;EF+HpB,kBAAiB;EACjB,aAAY;EACZ,sBK3JoB;EL4JpB,gBAAe;EACf,YAA2B;EAC3B,UK9JoB;EL+JpB,WAAU,EA6BX;EArCD;IAWI,kBAAiB,EAClB;EI9HC;IJkHJ;MAgBM,mBAAkB,EACnB,EAAA;EIrID;IJoHJ;MAsBM,kBAAiB,EAClB,EAAA;EI7ID;IJsHJ;MA4BM,kBAAiB,EAClB,EAAA;EIrJD;IJwHJ;MAkCM,mBAAkB,EACnB,EAAA;;AAIL;EACE,4BAA2B,EAC5B","file":"patternlab-scaffolding.css","sourcesContent":["/**\n * This stylesheet is for styles you want to include only when displaying demo\n * styles for grids, animations, color swatches, etc.\n * These styles will not be our production CSS.\n */\n\n@import 'core';\n\n@import '../_patterns/10-layouts/30-hero-layouts/10-hero-layout-2/rpll-hero-layout-2.shared.variables';\n\n//\n// rescue styles only for PatternLab\n//\n// This allows us to make some thing look reasonable in PatternLab when they are being demoed \"out of their natural\n// habitat\" so to speak. These style do not get used in a production environment, so use sparingly and document them\n// in the appropriate twig and .md files\n//\n.sg-pattern-example > .rpll-two-column-list,\n.sg-pattern-example > .rpll-four-column-list,\n.sg-pattern-example > .rpll-three-column-list,\nbody > .rpll-two-column-list,\nbody > .rpll-four-column-list,\nbody > .rpll-three-column-list {\n  @include standard-row;\n}\n\n.rplc-teaser-simple-image-link {\n  max-width: rem(265px);\n}\n\n.rplc-teaser-standard, .rplc-teaser-minimal {\n  @include breakpoint(desktop) {\n    max-width: rem(590px);\n  }\n}\n\n.rplc-teaser-highlighted {\n  @include breakpoint(desktop) {\n    max-width: $smallest-desktop-size-less-gutters;\n  }\n}\n\n.rplc-teaser-image-link-box {\n  @media only screen and (min-width: #{$smallest-desktop-size-less-gutters}) {\n    max-width: rem(392px);\n  }\n}\n\n// PatternLab stuff\n#sg-patterns {\n  -webkit-box-sizing: border-box !important;\n          box-sizing: border-box !important;\n  max-width: 100%;\n  padding: 0;\n}\n\n// make all patterns have some padding left and right (to make it look nice) ...\n.sg-subtype, .sg-pattern > * {\n  padding-left: .5rem !important;\n  padding-right: .5rem !important;\n}\n\n// ... except for the ones that are supposed to go window width\n#components-image-window-width,\n#components-hero-article,\n#components-hero-standard,\n#components-hero-landing-page,\n#components-hero-landing-page-crisis-watch,\n#components-hero-text-only,\n#layouts-hero-layout-1,\n#layouts-hero-layout-2,\n#layouts-hero-layout-1-simpler {\n  & > .sg-pattern-example {\n    padding-left: 0 !important;\n    padding-right: 0 !important;\n  }\n}\n\n#atoms-social-share-standard {\n  background-color: get-neutral-color('white');\n}\n\n// style to make a responsive div for the hero layouts\n.patternlab-faux-hero-image-21-9 {\n  height: 100vw;\n  line-height: 100vw;\n  width: 100%;\n\n  @include breakpoint(phablet) {\n    line-height: calc(100vw / ( 21 / 9 ));\n    height: calc(100vw / ( 21 / 9 ));\n  }\n}\n\n.patternlab-faux-hero-image-16-9 {\n  height: 100vw;\n  line-height: 100vw;\n  width: 100%;\n\n  @include breakpoint(phablet) {\n    line-height: calc(100vw / ( 16 / 9 ));\n    height: calc(100vw / ( 16 / 9 ));\n  }\n}\n\n.patternlab-faux-hero-2-text {\n  background-color: get-neutral-color('black');\n  border: 4px dashed #333;\n  height:200px;\n  line-height: 200px;\n  text-align:center;\n\n  @media only screen and (min-width: #{$hero-layout-2-smallest-large-device-size}) {\n    background-color: transparent;\n  }\n}\n\n.demo-animate {\n  background: #ddd;\n  padding: 1em;\n  margin-bottom: 1em;\n  text-align: center;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.sg-colors {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  list-style: none !important;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n.sg-colors li {\n  -webkit-box-flex: 1;\n      -ms-flex: auto;\n          flex: auto;\n  padding: 0.3em;\n  margin: 0 0.5em 0.5em 0;\n  min-width: 5em;\n  max-width: 17em;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n}\n\n.sg-swatch {\n  display: block;\n  height: 4em;\n  margin-bottom: 0.3em;\n  border-radius: 5px;\n}\n\n.sg-label {\n  font-size: 90%;\n  line-height: 1;\n}\n\n#patternlab-screen-size {\n  background: get-brand-color();\n  font-weight: bold;\n  opacity: 0.5;\n  padding: $standard-gutter/4 $standard-gutter;\n  position: fixed;\n  right: $standard-gutter * 2;\n  top: $standard-gutter;\n  z-index: 5;\n\n  &::before {\n    content: 'mobile';\n  }\n\n  @include breakpoint(phablet) {\n    &::before {\n      content: 'phablet';\n    }\n  }\n\n  @include breakpoint(tablet) {\n    &::before {\n      content: 'tablet';\n    }\n  }\n\n  @include breakpoint(laptop) {\n    &::before {\n      content: 'laptop';\n    }\n  }\n\n  @include breakpoint(desktop) {\n    &::before {\n      content: 'desktop';\n    }\n  }\n}\n\n.sg-tabs-panel {\n  min-height: 20em !important;\n}","@import '../x.tier-2';\n\nbody {\n  @include typography-body;\n}\n\n// end of file\n","//\n// Tier 1 variables\n//\n// The main purpose of tier 1 is to set out the values for single CSS properties concepts, such as font size and color.\n//\n// This file is, essentially, a bunch of enumerations and represent the very core building blocks of the visual system.\n//\n// The enumerations are deliberately a little obfuscates to avoid direct array access. Access should all go through\n// the specific accessor function and/or mixin provided for each.\n//\n//\n\n@function safe-map-get($map, $option) {\n  @if map-has-key($map, $option) {\n    @return map-get($map, $option);\n  } @else {\n    @error '#{$map} does not contain the key #{$option}';\n    @return null;\n  }\n}\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n//\n// Function to get a brand color\n//\n@function get-brand-color($option: 'primary') {\n  $brand-colors: (\n    'primary': #fdc513,\n    'primary-tint-1': #ffd44b,\n    'primary-tint-2': #ffd960,\n  );\n\n  @if $option != 'all' {\n    @return safe-map-get($brand-colors, $option);\n  } @else {\n    @return $brand-colors;\n  }\n}\n\n// generates a JSON array of brand colors to be used by PatternLab\n$xxx-bc: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', get-brand-color('all'), (prefix: '{ \"color_brand\":', suffix: '}'));\n\n//\n// Function to get a neutral color\n//\n@function get-neutral-color($option: 'gray') {\n  $neutral-colors: (\n    'white': #fff,\n    'very-light-gray': #f6f6f6,\n    'light-gray': #e9e9e9,\n    'gray': #d1d1d1,\n    'dark-gray': #666,\n    'very-dark-gray': #383838,\n    'black': #000,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($neutral-colors, $option);\n  } @else {\n    @return $neutral-colors;\n  }\n}\n\n// generates a JSON array of neutral colors to be used by PatternLab\n$xxx-nc: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', get-neutral-color('all'), (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n//\n// Function to get a utility color\n//\n@function get-utility-color($option: 'alert') {\n  $utility-colors: (\n    'alert': #ee2d14,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($utility-colors, $option);\n  } @else {\n    @return $utility-colors;\n  }\n}\n// generates a JSON array of utility colors to be used by PatternLab\n$xxx-uc: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', get-utility-color('all'), (prefix: '{ \"color_utility\":', suffix: '}'));\n\n\n//\n// Font size\n//\n\n// Function to get a font size value from its array entry key\n@function get-font-size($option: 'm') {\n  $font-sizes: (\n    'm': rem(18px),\n    'm-1': rem(20px),\n    'l': rem(26px),\n    'l-1': rem(36px),\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-sizes, $option);\n  } @else {\n    @return $font-sizes;\n  }\n}\n\n//\n// Font size mixin\n//\n@mixin font-size($option: 'm') {\n  font-size: get-font-size($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fs: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', get-font-size('all'), (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n\n// Function to get a line height value from its array entry key\n@function get-line-height($option: 'm') {\n  $line-heights: (\n    's': 1,\n    's-1': 1.2,\n    'm': 1.6,\n    'm-1': 1.75,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($line-heights, $option);\n  } @else {\n    @return $line-heights;\n  }\n}\n\n//\n// Line height mixin\n//\n@mixin line-height($option: 'm') {\n  line-height: get-line-height($option);\n}\n\n// generates a JSON array of line heights to be used by PatternLab\n$xxx-lh: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', get-line-height('all'), (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n\n// Function to get a letter spacing value from its array entry key\n@function get-letter-spacing($option: 'm') {\n  $letter-spacings: (\n    'compact': -.03em,\n    'standard': -.01em,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($letter-spacings, $option);\n  } @else {\n    @return $letter-spacings;\n  }\n}\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: get-letter-spacing($option);\n}\n\n// generates a JSON array of letter spacing to be used by PatternLab\n$xxx-ls: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', get-letter-spacing('all'), (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n\n// Function to get a font weight value from its array entry key\n@function get-font-weight($option: 'm') {\n  $font-weights: (\n    'light': 300,\n    'normal': 400,\n    'bold': 700,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-weights, $option);\n  } @else {\n    @return $font-weights;\n  }\n}\n\n@mixin font-weight($option: 'normal') {\n  font-weight: get-font-weight($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fw: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', get-font-weight('all'), (prefix: '{ \"font_weight\":', suffix: '}'));\n\n\n// end of file\n\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n","@import 'abstract/rem';\n@import 'abstract/mixins';\n@import 'x.tier-1';\n@import 'x.tier-2';\n\n// public variables\n\n$standard-overlay-treatment: rgba(0, 0, 0, .5);\n\n$standard-gutter: 1rem;\n$standard-horizontal-margin-accounting-for-gutters: 2 * $standard-gutter;\n$private-row-gutter: $standard-gutter; // kept distinct from the standard gutter as i can see this changing to 2rem\n$well-width-inner: rem(1208px);\n$max-row-width: $well-width-inner + ($standard-gutter * 2);\n\n$smallest-desktop-size: $max-row-width;\n$smallest-desktop-size-less-gutters: $well-width-inner - rem(1px);\n$smallest-laptop-size: rem(1024px);\n$smallest-tablet-size: rem(768px);\n$smallest-phablet-size: rem(641px);\n\n// The default font family.\n$base-font-family: $font-family-sans-serif;\n\n$body-background-color: get-neutral-color('very-light-gray');\n\n@import 'base/base';\n\n\n\n// end of file\n"]}