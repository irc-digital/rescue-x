{"version":3,"sources":["patternlab-scaffolding.scss","_variables.scss","helpers/_rem.scss"],"names":[],"mappings":"AAAA;;;;GAIG;AAaH;;;;;;ECsCE,kBAAiB;EACjB,mBAAkB;EAClB,mBA3BwD;EA4BxD,mBAhCoB;EAiCpB,oBAjCoB,EDFrB;;AAED;EACE,sBES0D,EFR3D;;ACuDG;EDrDJ;IAEI,qBEIwD,EFF3D,EAAA;;ACiDG;ED/CJ;IAEI,sBCL6D,EDOhE,EAAA;;AAGC;EADF;IAEI,mBERwD,EFU3D,EAAA;;AAGD;EACE,0CAAyC;EACjC,kCAAiC;EACzC,gBAAe;EACf,WAAU,EACX;;AAGD;EACE,+BAA8B;EAC9B,gCAA+B,EAChC;;AAGD;;;;;;;;;EAUI,2BAA0B;EAC1B,4BAA2B,EAC5B;;AAGH;EACE,uBCzEU,ED0EX;;AAGD;EACE,cAAa;EACb,mBAAkB;EAClB,YAAW,EAMZ;ECHG;IDNJ;MAMI,sCAAqC;MACrC,iCAAgC,EAEnC,EAAA;;AAED;EACE,cAAa;EACb,mBAAkB;EAClB,YAAW,EAMZ;ECdG;IDKJ;MAMI,sCAAqC;MACrC,iCAAgC,EAEnC,EAAA;;AAED;EACE,uBC9FU;ED+FV,wBAAuB;EACvB,cAAY;EACZ,mBAAkB;EAClB,mBAAiB,EAKlB;EAHC;IAPF;MAQI,8BAA6B,EAEhC,EAAA;;AAED;EACE,iBAAgB;EAChB,aAAY;EACZ,mBAAkB;EAClB,mBAAkB;EAClB,mBAAkB;EAClB,gBAAe,EAChB;;AAED;EACE,qBAAoB;EACpB,qBAAoB;EACpB,cAAa;EACb,oBAAmB;EACf,gBAAe;EACnB,4BAA2B;EAC3B,sBAAqB;EACrB,qBAAoB,EACrB;;AACD;EACE,oBAAmB;EACf,eAAc;EACV,WAAU;EAClB,eAAc;EACd,wBAAuB;EACvB,eAAc;EACd,gBAAe;EACf,uBAAsB;EACtB,mBAAkB,EACnB;;AAED;EACE,eAAc;EACd,YAAW;EACX,qBAAoB;EACpB,mBAAkB,EACnB;;AAED;EACE,eAAc;EACd,eAAc,EACf;;AAED;EACE,oBClJ0B;EDmJ1B,kBAAiB;EACjB,aAAY;EACZ,sBC1IoB;ED2IpB,gBAAe;EACf,YAA2B;EAC3B,UC7IoB;ED8IpB,WAAU,EA6BX;EArCD;IAWI,kBAAiB,EAClB;ECnFC;IDuEJ;MAgBM,mBAAkB,EACnB,EAAA;EC1FD;IDyEJ;MAsBM,kBAAiB,EAClB,EAAA;EClGD;ID2EJ;MA4BM,kBAAiB,EAClB,EAAA;EC1GD;ID6EJ;MAkCM,mBAAkB,EACnB,EAAA;;AAIL;EACE,4BAA2B,EAC5B","file":"patternlab-scaffolding.css","sourcesContent":["/**\n * This stylesheet is for styles you want to include only when displaying demo\n * styles for grids, animations, color swatches, etc.\n * These styles will not be our production CSS.\n */\n\n@import 'variables';\n\n@import '../_patterns/10-layouts/30-hero-layouts/10-hero-layout-2/rpll-hero-layout-2.shared.variables';\n\n//\n// rescue styles only for PatternLab\n//\n// This allows us to make some thing look reasonable in PatternLab when they are being demoed \"out of their natural\n// habitat\" so to speak. These style do not get used in a production environment, so use sparingly and document them\n// in the appropriate twig and .md files\n//\n.sg-pattern-example > .rpll-two-column-list,\n.sg-pattern-example > .rpll-four-column-list,\n.sg-pattern-example > .rpll-three-column-list,\nbody > .rpll-two-column-list,\nbody > .rpll-four-column-list,\nbody > .rpll-three-column-list {\n  @include standard-row;\n}\n\n.rplc-teaser-simple-image-link {\n  max-width: rem(265px);\n}\n\n.rplc-teaser-standard, .rplc-teaser-minimal {\n  @include breakpoint(desktop) {\n    max-width: rem(590px);\n  }\n}\n\n.rplc-teaser-highlighted {\n  @include breakpoint(desktop) {\n    max-width: $smallest-desktop-size-less-gutters;\n  }\n}\n\n.rplc-teaser-image-link-box {\n  @media only screen and (min-width: #{$smallest-desktop-size-less-gutters}) {\n    max-width: rem(392px);\n  }\n}\n\n// PatternLab stuff\n#sg-patterns {\n  -webkit-box-sizing: border-box !important;\n          box-sizing: border-box !important;\n  max-width: 100%;\n  padding: 0;\n}\n\n// make all patterns have some padding left and right (to make it look nice) ...\n.sg-subtype, .sg-pattern > * {\n  padding-left: .5rem !important;\n  padding-right: .5rem !important;\n}\n\n// ... except for the ones that are supposed to go window width\n#components-image-window-width,\n#components-hero-article,\n#components-hero-standard,\n#components-hero-landing-page,\n#components-hero-landing-page-crisis-watch,\n#components-hero-text-only,\n#layouts-hero-layout-1,\n#layouts-hero-layout-2,\n#layouts-hero-layout-1-simpler {\n  & > .sg-pattern-example {\n    padding-left: 0 !important;\n    padding-right: 0 !important;\n  }\n}\n\n#atoms-social-share-standard {\n  background-color: $white;\n}\n\n// style to make a responsive div for the hero layouts\n.patternlab-faux-hero-image-21-9 {\n  height: 100vw;\n  line-height: 100vw;\n  width: 100%;\n\n  @include breakpoint(phablet) {\n    line-height: calc(100vw / ( 21 / 9 ));\n    height: calc(100vw / ( 21 / 9 ));\n  }\n}\n\n.patternlab-faux-hero-image-16-9 {\n  height: 100vw;\n  line-height: 100vw;\n  width: 100%;\n\n  @include breakpoint(phablet) {\n    line-height: calc(100vw / ( 16 / 9 ));\n    height: calc(100vw / ( 16 / 9 ));\n  }\n}\n\n.patternlab-faux-hero-2-text {\n  background-color: $black;\n  border: 4px dashed #333;\n  height:200px;\n  line-height: 200px;\n  text-align:center;\n\n  @media only screen and (min-width: #{$hero-layout-2-smallest-large-device-size}) {\n    background-color: transparent;\n  }\n}\n\n.demo-animate {\n  background: #ddd;\n  padding: 1em;\n  margin-bottom: 1em;\n  text-align: center;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.sg-colors {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  list-style: none !important;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n.sg-colors li {\n  -webkit-box-flex: 1;\n      -ms-flex: auto;\n          flex: auto;\n  padding: 0.3em;\n  margin: 0 0.5em 0.5em 0;\n  min-width: 5em;\n  max-width: 14em;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n}\n\n.sg-swatch {\n  display: block;\n  height: 4em;\n  margin-bottom: 0.3em;\n  border-radius: 5px;\n}\n\n.sg-label {\n  font-size: 90%;\n  line-height: 1;\n}\n\n#patternlab-screen-size {\n  background: $primary-color;\n  font-weight: bold;\n  opacity: 0.5;\n  padding: $standard-gutter/4 $standard-gutter;\n  position: fixed;\n  right: $standard-gutter * 2;\n  top: $standard-gutter;\n  z-index: 5;\n\n  &::before {\n    content: 'mobile';\n  }\n\n  @include breakpoint(phablet) {\n    &::before {\n      content: 'phablet';\n    }\n  }\n\n  @include breakpoint(tablet) {\n    &::before {\n      content: 'tablet';\n    }\n  }\n\n  @include breakpoint(laptop) {\n    &::before {\n      content: 'laptop';\n    }\n  }\n\n  @include breakpoint(desktop) {\n    &::before {\n      content: 'desktop';\n    }\n  }\n}\n\n.sg-tabs-panel {\n  min-height: 20em !important;\n}","@import 'helpers/rem';\n@import 'variables.private';\n\n// public variables\n\n// colors\n$white: #fff;\n$very-light-gray: #f6f6f6;\n$light-gray: #e9e9e9;\n$gray: #d1d1d1;\n$dark-gray: #666;\n$very-dark-gray: #383838;\n$black: #000;\n$red: #ee2d14;\n$alert: $red;\n$private-irc-yellow: #fdc513;\n$primary-color: $private-irc-yellow;\n$standard-overlay-treatment: rgba(0, 0, 0, .5);\n\n// font weights\n$strong: 700;\n\n//#FFD960\n//#FFD44B\n\n\n$standard-gutter: 1rem;\n$standard-horizontal-margin-accounting-for-gutters: 2 * $standard-gutter;\n$private-row-gutter: $standard-gutter; // kept distinct from the standard gutter as i can see this changing to 2rem\n$well-width-inner: rem(1208px);\n$max-row-width: $well-width-inner + ($standard-gutter * 2);\n\n$smallest-desktop-size: $max-row-width;\n$smallest-desktop-size-less-gutters: $well-width-inner - rem(1px);\n$smallest-laptop-size: rem(1024px);\n$smallest-tablet-size: rem(768px);\n$smallest-phablet-size: rem(641px);\n\n// The default font family.\n$base-font-family: akzidenz-grotesk, Arial, sans-serif;\n\n$body-background-color: $very-light-gray;\n\n// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n//\n// Vertical Rhythm\n//\n// TAKEN FROM https://github.com/JohnAlbin/normalize-scss\n//\n// This is the minimal amount of code needed to create vertical rhythm in our\n// CSS. If you are looking for a robust solution, look at the excellent Typey\n// library. @see https://github.com/jptaranto/typey\n\n@function normalize-rhythm($value, $relative-to: $base-font-size, $unit: $base-unit) {\n  @if unit($value) != px {\n    @error 'The normalize vertical-rhythm module only supports px inputs. The typey library is better.';\n  }\n  @if $unit == rem {\n    @return ($value / $base-font-size) * 1rem;\n  } @else if $unit == em {\n    @return ($value / $relative-to) * 1em;\n  } @else { // $unit == px\n    @return $value;\n  }\n}\n\n@mixin normalize-font-size($value, $relative-to: $base-font-size) {\n  @if unit($value) != 'px' {\n    @error 'normalize-font-size() only supports px inputs. The typey library is better.';\n  }\n  font-size: normalize-rhythm($value, $relative-to);\n}\n\n@mixin normalize-rhythm($property, $values, $relative-to: $base-font-size) {\n  $value-list: $values;\n  $sep: space;\n  @if type-of($values) == 'list' {\n    $sep: list-separator($values);\n  } @else {\n    $value-list: append((), $values);\n  }\n\n  $normalized-values: ();\n  @each $value in $value-list {\n    @if unitless($value) and $value != 0 {\n      $value: $value * normalize-rhythm($base-line-height, $relative-to);\n    }\n    $normalized-values: append($normalized-values, $value, $sep);\n  }\n  #{$property}: $normalized-values;\n}\n\n@mixin normalize-margin($values, $relative-to: $base-font-size) {\n  @include normalize-rhythm(margin, $values, $relative-to);\n}\n\n@mixin normalize-line-height($font-size, $min-line-padding: 2px) {\n  $lines: ceil($font-size / $base-line-height);\n  // If lines are cramped include some extra leading.\n  @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {\n    $lines: $lines + 1;\n  }\n  @include normalize-rhythm(line-height, $lines, $font-size);\n}\n\n// end of file\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n"]}