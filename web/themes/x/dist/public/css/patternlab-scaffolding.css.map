{"version":3,"sources":["patternlab-scaffolding.css","patternlab-scaffolding.scss","abstract/_mixins.scss","rpl.tier-1.scss","rpl.tier-2.scss"],"names":[],"mappings":"AAMA,2CACA,4CCUA,0CDRA,4BACA,6BAFA,2BEIE,YAAA,KACA,aAAA,KACA,UAAA,QACA,aAAA,KACA,cAAA,KDaF,qDACE,MAAA,KAGF,+BACE,UAAA,MAMF,yBAAA,0BAEI,MAAA,KCFA,2CDAJ,qBAAA,sBAMI,UAAA,WCNA,2CDUJ,yBAEI,UAAA,YAKF,8CADF,4BAEI,UAAA,SAKJ,aACE,mBAAA,qBACA,WAAA,qBACA,UAAA,KACA,QAAA,EAIF,cAAA,YACE,aAAA,eACA,cAAA,eDxBF,6CAGA,+DADA,kDADA,8CAIA,+CAEA,4EADA,8DAQA,2EADA,6DAHA,iEADA,iEADA,iDAIA,mECgBA,mDDxBA,kDAYA,sCAGA,mDAFA,2CACA,2CCgCI,aAAA,YACA,cAAA,YAIJ,6BACE,iBAAA,KAGF,mCACE,iBAAA,QAIF,iCACE,OAAA,MACA,YAAA,MACA,MAAA,KCtEE,8CDmEJ,iCAMI,YAAA,uBACA,OAAA,wBAIJ,iCACE,OAAA,MACA,YAAA,MACA,MAAA,KCjFE,8CD8EJ,iCAMI,YAAA,uBACA,OAAA,wBAIJ,6BACE,iBAAA,KACA,OAAA,IAAA,OAAA,KACA,OAAA,MACA,YAAA,MACA,WAAA,OAEA,8CAPF,6BAQI,iBAAA,aAIJ,6BACE,iBAAA,QAGF,cACE,WAAA,KACA,QAAA,IACA,cAAA,IACA,WAAA,OACA,cAAA,IACA,OAAA,QAGF,WACE,QAAA,YACA,QAAA,YACA,QAAA,KACA,cAAA,KACI,UAAA,KACJ,WAAA,eACA,QAAA,YACA,OAAA,YAEF,cACE,iBAAA,EACI,SAAA,KACI,KAAA,KACR,QAAA,KACA,OAAA,EAAA,KAAA,KAAA,EACA,UAAA,IACA,UAAA,KACA,OAAA,IAAA,MAAA,KACA,cAAA,IAGF,WACE,QAAA,MACA,OAAA,IACA,cAAA,KACA,cAAA,IAGF,UACE,UAAA,IACA,YAAA,EAGF,wBACE,WAAA,QACA,YAAA,IACA,QAAA,GACA,QAAA,OAAA,KACA,SAAA,MACA,MAAA,KACA,IAAA,KACA,QAAA,EARF,gCAWI,QAAA,SC/JA,8CDoJJ,gCAgBM,QAAA,WCtKF,yCDsJJ,gCAsBM,QAAA,UC9KF,yCDwJJ,gCA4BM,QAAA,UCtLF,2CD0JJ,gCAkCM,QAAA,WAKN,eACE,WAAA,eAGF,iCEpHE,UAAA,QA+EA,YAAA,IAjDA,YAAA,IDzGE,8CD+LJ,iCEpHE,UAAA,MFwHF,2BExHE,UAAA,KA+EA,YAAA,IAjDA,YAAA,IDzGE,8CDmMJ,2BExHE,UAAA,UF4HF,8BE7CE,YAAA,IClGA,cAAA,IAAA,MAAA,QACA,QAAA,OH8IF,oCGpJE,iBAAA,QHwJF,2BEhIE,UAAA,QD3EE,8CD2MJ,2BEhIE,UAAA,OA8BA,YAAA,KFsGF,+BEpIE,UAAA,SA+EA,YAAA,IAzBA,eAAA,OAxBA,YAAA,IDzGE,8CD+MJ,+BEpIE,UAAA,SFwIF,qCExIE,UAAA,QA+EA,YAAA,IAzBA,eAAA,OAxBA,YAAA,IDzGE,8CDmNJ,qCExIE,UAAA,SF4IF,8BE5IE,UAAA,OA+EA,YAAA,IAzBA,eAAA,OAxBA,YAAA,IDzGE,8CDuNJ,8BE5IE,UAAA,SFgJF,oCEhJE,UAAA,QA+EA,YAAA,IAzBA,eAAA,OAxBA,YAAA,IDzGE,8CD2NJ,oCEhJE,UAAA","file":"patternlab-scaffolding.css","sourcesContent":[null,"/**\n * This stylesheet is for styles you want to include only when displaying demo\n * styles for grids, animations, color swatches, etc.\n * These styles will not be our production CSS.\n */\n\n@import 'core';\n\n@import '../_patterns/10-layouts/30-hero-layouts/10-hero-layout-2/rpll-hero-layout-2.shared.variables';\n\n//\n// rescue styles only for PatternLab\n//\n// This allows us to make some thing look reasonable in PatternLab when they are being demoed \"out of their natural\n// habitat\" so to speak. These style do not get used in a production environment, so use sparingly and document them\n// in the appropriate twig and .md files\n//\n.sg-pattern-example > .rpll-two-column-list,\n.sg-pattern-example > .rpll-four-column-list,\n.sg-pattern-example > .rpll-three-column-list,\nbody > .rpll-two-column-list,\nbody > .rpll-four-column-list,\nbody > .rpll-three-column-list {\n  @include standard-row;\n}\n\n//\n// 1) Hack for Pattern Lab to make the highlight teaser look right when it is view entirely standalone\n//\nbody > .rplc-teaser-highlighted .rpla-responsive-image {\n  width: 100% // 1)\n}\n\n.rplc-teaser-simple-image-link {\n  max-width: rem(640px);\n}\n\n//\n// 1) Dodges around oddity related to responsive image handling when we are outside of a legit container (grid)\n//\n.rplc-teaser-standard, .rplc-teaser-minimal {\n  img {\n    width: 100%; // 1\n  }\n\n  @include breakpoint(desktop) {\n    max-width: rem(590px);\n  }\n}\n\n.rplc-teaser-highlighted {\n  @include breakpoint(desktop) {\n    max-width: $smallest-desktop-size-less-gutters;\n  }\n}\n\n.rplc-teaser-image-link-box {\n  @media only screen and (min-width: #{$smallest-desktop-size-less-gutters}) {\n    max-width: rem(392px);\n  }\n}\n\n// PatternLab stuff\n#sg-patterns {\n  -webkit-box-sizing: border-box !important;\n  box-sizing: border-box !important;\n  max-width: 100%;\n  padding: 0;\n}\n\n// make all patterns have some padding left and right (to make it look nice) ...\n.sg-subtype, .sg-pattern > * {\n  padding-left: 1rem !important;\n  padding-right: 1rem !important;\n}\n\n// ... except for the ones that are supposed to go window width\n#components-image-window-width,\n#components-hero-article,\n#components-hero-standard,\n#components-hero-landing-page,\n#components-hero-landing-page-crisis-watch,\n#components-news-and-features,\n#components-hero-text-only,\n#components-image-partial-width-landscape,\n#components-image-partial-width-landscape-caption-right,\n#components-image-well-width,\n#components-image-well-width-variable-height,\n#components-image-well-width-caption-low-key,\n#components-image-window-width,\n#components-image-window-width-caption-low-key,\n#components-image-partial-width-portrait,\n#components-image-partial-width-portrait-caption-right,\n#components-image-window-width,\n#components-quote,\n#layouts-hero-layout-1,\n#layouts-hero-layout-2,\n#layouts-hero-layout-1-simpler {\n  & > .sg-pattern-example {\n    padding-left: 0 !important;\n    padding-right: 0 !important;\n  }\n}\n\n#atoms-social-share-standard {\n  background-color: get-neutral-color('white');\n}\n\n#molecules-section-heading-inverse {\n  background-color: get-brand-color();\n}\n\n// style to make a responsive div for the hero layouts\n.patternlab-faux-hero-image-21-9 {\n  height: 100vw;\n  line-height: 100vw;\n  width: 100%;\n\n  @include breakpoint(phablet) {\n    line-height: calc(100vw / ( 21 / 9 ));\n    height: calc(100vw / ( 21 / 9 ));\n  }\n}\n\n.patternlab-faux-hero-image-16-9 {\n  height: 100vw;\n  line-height: 100vw;\n  width: 100%;\n\n  @include breakpoint(phablet) {\n    line-height: calc(100vw / ( 16 / 9 ));\n    height: calc(100vw / ( 16 / 9 ));\n  }\n}\n\n.patternlab-faux-hero-2-text {\n  background-color: get-neutral-color('black');\n  border: 4px dashed #333;\n  height:200px;\n  line-height: 200px;\n  text-align:center;\n\n  @media only screen and (min-width: #{$hero-layout-2-smallest-large-device-size}) {\n    background-color: transparent;\n  }\n}\n\n*[id*='atoms-link-(inverse)'] {\n  background-color: get-brand-color();\n}\n\n.demo-animate {\n  background: #ddd;\n  padding: 1em;\n  margin-bottom: 1em;\n  text-align: center;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.sg-colors {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  list-style: none !important;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n.sg-colors li {\n  -webkit-box-flex: 1;\n      -ms-flex: auto;\n          flex: auto;\n  padding: 0.3em;\n  margin: 0 0.5em 0.5em 0;\n  min-width: 5em;\n  max-width: 17em;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n}\n\n.sg-swatch {\n  display: block;\n  height: 4em;\n  margin-bottom: 0.3em;\n  border-radius: 5px;\n}\n\n.sg-label {\n  font-size: 90%;\n  line-height: 1;\n}\n\n#patternlab-screen-size {\n  background: get-brand-color();\n  font-weight: bold;\n  opacity: 0.5;\n  padding: get-spacing('xs') get-spacing();\n  position: fixed;\n  right: get-spacing() * 2;\n  top: get-spacing();\n  z-index: 5;\n\n  &::before {\n    content: 'mobile';\n  }\n\n  @include breakpoint(phablet) {\n    &::before {\n      content: 'phablet';\n    }\n  }\n\n  @include breakpoint(tablet) {\n    &::before {\n      content: 'tablet';\n    }\n  }\n\n  @include breakpoint(laptop) {\n    &::before {\n      content: 'laptop';\n    }\n  }\n\n  @include breakpoint(desktop) {\n    &::before {\n      content: 'desktop';\n    }\n  }\n}\n\n.sg-tabs-panel {\n  min-height: 20em !important;\n}\n\n.xxx-typography-text-extra-small {\n  @include typography-text-extra-small;\n}\n\n.xxx-typography-text-small {\n  @include typography-text-small;\n}\n\n.xxx-typography-link-standard {\n  @include typography-link-standard;\n}\n\n.xxx-typography-text-large {\n  @include typography-text-large;\n}\n\n.xxx-typography-heading-medium {\n  @include typography-heading-medium;\n}\n\n.xxx-typography-heading-medium-large {\n  @include typography-heading-medium-large;\n}\n\n.xxx-typography-heading-large {\n  @include typography-heading-large;\n}\n\n.xxx-typography-heading-extra-large {\n  @include typography-heading-extra-large;\n}","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: get-spacing();\n  padding-right: get-spacing();\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n","//\n// Tier 1 variables\n//\n// The main purpose of tier 1 is to set out the values for single CSS properties concepts, such as font size and color.\n//\n// This file is, essentially, a bunch of enumerations and represent the very core building blocks of the visual system.\n//\n// The enumerations are deliberately a little obfuscates to avoid direct array access. Access should all go through\n// the specific accessor function and/or mixin provided for each.\n//\n//\n\n@function safe-map-get($map, $option) {\n  @if map-has-key($map, $option) {\n    @return map-get($map, $option);\n  } @else {\n    @error '#{$map} does not contain the key #{$option}';\n    @return null;\n  }\n}\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n//\n// Function to get a brand color\n//\n@function get-brand-color($option: 'primary') {\n  $brand-colors: (\n    'primary': #fdc513,\n    'primary-tint-1': #ffd44b,\n    'primary-tint-2': #ffd960,\n  );\n\n  @if $option != 'all' {\n    @return safe-map-get($brand-colors, $option);\n  } @else {\n    @return $brand-colors;\n  }\n}\n\n// generates a JSON array of brand colors to be used by PatternLab\n$xxx-bc: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', get-brand-color('all'), (prefix: '{ \"color_brand\":', suffix: '}'));\n\n//\n// Function to get a neutral color\n//\n@function get-neutral-color($option: 'gray') {\n  $neutral-colors: (\n    'white': #fff,\n    'very-light-gray': #f6f6f6,\n    'light-gray': #e9e9e9,\n    'gray': #d1d1d1,\n    'dark-gray': #666,\n    'very-dark-gray': #383838,\n    'black': #000,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($neutral-colors, $option);\n  } @else {\n    @return $neutral-colors;\n  }\n}\n\n// generates a JSON array of neutral colors to be used by PatternLab\n$xxx-nc: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', get-neutral-color('all'), (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n//\n// Function to get a utility color\n//\n@function get-utility-color($option: 'alert') {\n  $utility-colors: (\n    'alert': #ee2d14,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($utility-colors, $option);\n  } @else {\n    @return $utility-colors;\n  }\n}\n// generates a JSON array of utility colors to be used by PatternLab\n$xxx-uc: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', get-utility-color('all'), (prefix: '{ \"color_utility\":', suffix: '}'));\n\n\n//\n// Font size\n//\n\n// Function to get a font size value from its array entry key\n@function get-font-size($option: 'm') {\n  // don't panic - these get converted to rem when they are returned\n  $font-sizes: (\n    'xxs': 12px,\n    'xs': 14px,\n    's': 16px,\n    'm': 18px,\n    'ml': 20px,\n    'l': 24px,\n    'xl': 28px,\n    'xxl': 36px,\n    'xxxl': 44px,\n    'xxxxl': 52px,\n    'xxxxxl': 60px,\n  );\n  @if $option != 'all' {\n    @return rem(safe-map-get($font-sizes, $option));\n  } @else {\n    @return $font-sizes;\n  }\n}\n\n//\n// Font size mixin\n//\n@mixin font-size($option: 'm') {\n  font-size: get-font-size($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fs: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', get-font-size('all'), (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n\n// Function to get a line height value from its array entry key\n@function get-line-height($option: 'm') {\n  $line-heights: (\n    'xxs': 1,\n    'xs': 1.2,\n    's': 1.4,\n    'm': 1.6,\n    'l': 1.75,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($line-heights, $option);\n  } @else {\n    @return $line-heights;\n  }\n}\n\n//\n// Line height mixin\n//\n@mixin line-height($option: 'm') {\n  line-height: get-line-height($option);\n}\n\n// generates a JSON array of line heights to be used by PatternLab\n$xxx-lh: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', get-line-height('all'), (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n\n// Function to get a letter spacing value from its array entry key\n@function get-letter-spacing($option: 'standard') {\n  $letter-spacings: (\n    'compact': -.03em,\n    'standard': -.01em,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($letter-spacings, $option);\n  } @else {\n    @return $letter-spacings;\n  }\n}\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: get-letter-spacing($option);\n}\n\n// generates a JSON array of letter spacing to be used by PatternLab\n$xxx-ls: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', get-letter-spacing('all'), (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n\n// Function to get a font weight value from its array entry key\n@function get-font-weight($option: 'normal') {\n  $font-weights: (\n    'light': 300,\n    'normal': 400,\n    'bold': 700,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-weights, $option);\n  } @else {\n    @return $font-weights;\n  }\n}\n\n@mixin font-weight($option: 'normal') {\n  font-weight: get-font-weight($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fw: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', get-font-weight('all'), (prefix: '{ \"font_weight\":', suffix: '}'));\n\n//\n// Font style\n//\n\n// Function to get a font style value\n@function get-font-style($option: 'normal') {\n  $font-styles: (\n    'normal': 'normal',\n    'italic': 'italic',\n    'oblique': 'oblique',\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-styles, $option);\n  } @else {\n    @return $font-styles;\n  }\n}\n\n@mixin font-style($option: 'normal') {\n  font-style: get-font-style($option);\n}\n\n// generates a JSON array of font style to be used by PatternLab\n$xxx-fst: export('dist/source/_patterns/00-subatoms/27-font-style/font-style.json', get-font-weight('all'), (prefix: '{ \"font_style\":', suffix: '}'));\n\n// Function to get a spacing value from its array entry key\n@function get-spacing($option: 'm') {\n  // don't panic - these get converted to rem when they are returned\n  $space-unit: 16px;\n  $spacings: (\n    'xs': $space-unit / 4, // 4px\n    's': $space-unit / 2, // 8px\n    'm': $space-unit,  // 16px\n    'ml': 1.5 * $space-unit, // 24px\n    'l': 2 * $space-unit, // 32px\n    'xl': 3 * $space-unit, // 48px\n    'xxl': 4 * $space-unit, // 64px\n  );\n  @if $option != 'all' {\n    @return rem(safe-map-get($spacings, $option));\n  } @else {\n    @return $spacings;\n  }\n}\n// generates a JSON array of spacing to be used by PatternLab\n$xxx-spac: export('dist/source/_patterns/00-subatoms/30-spacing/spacing.json', get-spacing('all'), (prefix: '{ \"spacing\":', suffix: '}'));\n\n\n// end of file\n\n","//\n// Tier 2 variables\n//\n\n@import 'rpl.tier-1';\n@import 'abstract/mixins';\n\n@function is-not-in-list ($list, $value) {\n  @return index($list, $value) == null;\n}\n\n@mixin typography-text-extra-extra-small {\n  @include font-size('xxs');\n  @include font-weight('light');\n  @include line-height('xxs');\n\n  @include breakpoint(phablet) {\n    @include font-size('xs');\n  }\n}\n\n@mixin typography-text-extra-small {\n  @include font-size('xs');\n  @include font-weight('light');\n  @include line-height('s');\n\n  @include breakpoint(phablet) {\n    @include font-size('s');\n  }\n}\n\n// internal function for small text mixin parameters\n@function xxx-tts-params ($option: 'keys') {\n  $typography-text-small-params: (\n    'm': 'Default value, up-sized to medium',\n    //'ml': 'Up-sizes to medium-large on non-mobile devices',\n    //'s': 'Prevents up-sizing by maintaining small font size on all devices',\n  );\n\n  @if $option != 'all' {\n    @return map-keys($typography-text-small-params);\n  } @else {\n    @return $typography-text-small-params;\n  }\n}\n\n//\n// Small text mixin. Outputs with a small (s) font size on mobile and a medium  on other devices\n//\n// The responds arguments allows some control over the up-sizing on non-mobile devices.\n// Options:\n//    m   Default value, up-sized to medium\n//    ml  Up-sizes to medium-large on non-mobile devices\n//    s   Prevents up-sizing by maintaining small font size on all devices\n//\n@mixin typography-text-small ($responds: 'm') {\n  @if is-not-in-list(xxx-tts-params(), $responds) { // sass-lint:disable-line empty-args\n    @error '#{$responds} is not a legitimate parameter';\n  }\n\n  $mobile-font-size: 's';\n  @include font-size($mobile-font-size);\n  @include font-weight('light');\n  @include line-height('s');\n\n  @if $responds != $mobile-font-size {\n    @include breakpoint(phablet) {\n      @include font-size($responds);\n    }\n  }\n}\n// generates a JSON array of typography-text-small paarameters to be used by PatternLab\n$xxx-tts: export('dist/source/_patterns/00-subatoms/50-tier-2-mixins/typography-text-small.json', xxx-tts-params('all'), (prefix: '{ \"typography_text_small\":', suffix: '}'));\n\n\n@mixin typography-text-standard {\n  @include font-size('m');\n  @include font-weight('light');\n  @include letter-spacing('standard');\n  @include line-height('m');\n\n  @include breakpoint(phablet) {\n    @include font-size('ml');\n    @include line-height('l');\n  }\n}\n\n@mixin typography-text-large ($responds: 'l') {\n  @include font-size('ml');\n\n  @include breakpoint(phablet) {\n    @include font-size('l');\n    @include line-height('m');\n  }\n}\n\n@mixin typography-link-standard-hover {\n  background-color: get-brand-color();\n}\n\n@mixin typography-link-standard ($has-hover-effect: true) {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-brand-color('primary');\n  display: inline;\n\n  @if $has-hover-effect {\n    &:hover {\n      @include typography-link-standard-hover;\n    }\n  }\n}\n\n@mixin typography-link-alert {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-utility-color('alert');\n  display: inline;\n\n  &:hover {\n    color: get-utility-color('alert');\n  }\n}\n\n@mixin typography-link-inverse-hover {\n  background-color: get-neutral-color('white');\n}\n\n@mixin typography-link-inverse {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-neutral-color('white');\n  display: inline;\n\n  &:hover {\n    @include typography-link-inverse-hover;\n  }\n}\n\n// Medium  on mobile, Medium large on bigger devices\n@mixin typography-heading-medium {\n  @include font-size('m');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s');\n\n  @include breakpoint(phablet) {\n    @include font-size('ml');\n  }\n}\n\n// Medium large on mobile, Extra large on bigger devices\n@mixin typography-heading-medium-large  {\n  @include font-size('ml');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s');\n\n  @include breakpoint(phablet) {\n    @include font-size('xl');\n  }\n}\n\n// Large on mobile, Extra extra large on bigger devices\n@mixin typography-heading-large {\n  @include font-size('l');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s');\n\n  @include breakpoint(phablet) {\n    @include font-size('xxl');\n  }\n}\n\n// Extra large on mobile, Extra extra large on bigger devices\n@mixin typography-heading-extra-large {\n  @include font-size('xl');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s');\n\n  @include breakpoint(phablet) {\n    @include font-size('xxl');\n  }\n}\n\n// Extra large light on mobile, Extra extra large on bigger devices (light)\n@mixin typography-heading-extra-large-light {\n  @include font-size('xl');\n  @include font-weight('light');\n  @include letter-spacing();\n  @include line-height('xs');\n\n  @include breakpoint(phablet) {\n    @include font-size('xxl');\n  }\n}\n\n// end of file\n"]}