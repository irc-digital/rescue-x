{"version":3,"sources":["patternlab-scaffolding.css","patternlab-scaffolding.scss","abstract/_mixins.scss"],"names":[],"mappings":"AAMA,2CACA,4CCUA,0CDRA,4BACA,6BAFA,2BEIE,YAAA,KACA,aAAA,KACA,UAAA,QACA,aAAA,KACA,cAAA,KDUF,+BACE,UAAA,WCaE,2CDVJ,qBAAA,sBAEI,UAAA,WCQA,2CDJJ,yBAEI,UAAA,YAKF,8CADF,4BAEI,UAAA,SAKJ,aACE,mBAAA,qBACQ,WAAA,qBACR,UAAA,KACA,QAAA,EAIF,cAAA,YACE,aAAA,gBACA,cAAA,gBDhBF,6CAGA,+DADA,kDADA,8CAGA,+CCgBA,mDDbA,mDAFA,2CACA,2CCwBI,aAAA,YACA,cAAA,YAIJ,6BACE,iBAAA,KAIF,iCACE,OAAA,MACA,YAAA,MACA,MAAA,KCxCE,8CDqCJ,iCAMI,YAAA,uBACA,OAAA,wBAIJ,iCACE,OAAA,MACA,YAAA,MACA,MAAA,KCnDE,8CDgDJ,iCAMI,YAAA,uBACA,OAAA,wBAIJ,6BACE,iBAAA,KACA,OAAA,IAAA,OAAA,KACA,OAAA,MACA,YAAA,MACA,WAAA,OAEA,8CAPF,6BAQI,iBAAA,aAIJ,6BACE,iBAAA,QAGF,cACE,WAAA,KACA,QAAA,IACA,cAAA,IACA,WAAA,OACA,cAAA,IACA,OAAA,QAGF,WACE,QAAA,YACA,QAAA,YACA,QAAA,KACA,cAAA,KACI,UAAA,KACJ,WAAA,eACA,QAAA,YACA,OAAA,YAEF,cACE,iBAAA,EACI,SAAA,KACI,KAAA,KACR,QAAA,KACA,OAAA,EAAA,KAAA,KAAA,EACA,UAAA,IACA,UAAA,KACA,OAAA,IAAA,MAAA,KACA,cAAA,IAGF,WACE,QAAA,MACA,OAAA,IACA,cAAA,KACA,cAAA,IAGF,UACE,UAAA,IACA,YAAA,EAGF,wBACE,WAAA,QACA,YAAA,IACA,QAAA,GACA,QAAA,OAAA,KACA,SAAA,MACA,MAAA,KACA,IAAA,KACA,QAAA,EARF,gCAWI,QAAA,SCjIA,8CDsHJ,gCAgBM,QAAA,WCxIF,yCDwHJ,gCAsBM,QAAA,UChJF,yCD0HJ,gCA4BM,QAAA,UCxJF,2CD4HJ,gCAkCM,QAAA,WAKN,eACE,WAAA","file":"patternlab-scaffolding.css","sourcesContent":[null,"/**\n * This stylesheet is for styles you want to include only when displaying demo\n * styles for grids, animations, color swatches, etc.\n * These styles will not be our production CSS.\n */\n\n@import 'core';\n\n@import '../_patterns/10-layouts/30-hero-layouts/10-hero-layout-2/rpll-hero-layout-2.shared.variables';\n\n//\n// rescue styles only for PatternLab\n//\n// This allows us to make some thing look reasonable in PatternLab when they are being demoed \"out of their natural\n// habitat\" so to speak. These style do not get used in a production environment, so use sparingly and document them\n// in the appropriate twig and .md files\n//\n.sg-pattern-example > .rpll-two-column-list,\n.sg-pattern-example > .rpll-four-column-list,\n.sg-pattern-example > .rpll-three-column-list,\nbody > .rpll-two-column-list,\nbody > .rpll-four-column-list,\nbody > .rpll-three-column-list {\n  @include standard-row;\n}\n\n.rplc-teaser-simple-image-link {\n  max-width: rem(265px);\n}\n\n.rplc-teaser-standard, .rplc-teaser-minimal {\n  @include breakpoint(desktop) {\n    max-width: rem(590px);\n  }\n}\n\n.rplc-teaser-highlighted {\n  @include breakpoint(desktop) {\n    max-width: $smallest-desktop-size-less-gutters;\n  }\n}\n\n.rplc-teaser-image-link-box {\n  @media only screen and (min-width: #{$smallest-desktop-size-less-gutters}) {\n    max-width: rem(392px);\n  }\n}\n\n// PatternLab stuff\n#sg-patterns {\n  -webkit-box-sizing: border-box !important;\n          box-sizing: border-box !important;\n  max-width: 100%;\n  padding: 0;\n}\n\n// make all patterns have some padding left and right (to make it look nice) ...\n.sg-subtype, .sg-pattern > * {\n  padding-left: .5rem !important;\n  padding-right: .5rem !important;\n}\n\n// ... except for the ones that are supposed to go window width\n#components-image-window-width,\n#components-hero-article,\n#components-hero-standard,\n#components-hero-landing-page,\n#components-hero-landing-page-crisis-watch,\n#components-hero-text-only,\n#layouts-hero-layout-1,\n#layouts-hero-layout-2,\n#layouts-hero-layout-1-simpler {\n  & > .sg-pattern-example {\n    padding-left: 0 !important;\n    padding-right: 0 !important;\n  }\n}\n\n#atoms-social-share-standard {\n  background-color: get-neutral-color('white');\n}\n\n// style to make a responsive div for the hero layouts\n.patternlab-faux-hero-image-21-9 {\n  height: 100vw;\n  line-height: 100vw;\n  width: 100%;\n\n  @include breakpoint(phablet) {\n    line-height: calc(100vw / ( 21 / 9 ));\n    height: calc(100vw / ( 21 / 9 ));\n  }\n}\n\n.patternlab-faux-hero-image-16-9 {\n  height: 100vw;\n  line-height: 100vw;\n  width: 100%;\n\n  @include breakpoint(phablet) {\n    line-height: calc(100vw / ( 16 / 9 ));\n    height: calc(100vw / ( 16 / 9 ));\n  }\n}\n\n.patternlab-faux-hero-2-text {\n  background-color: get-neutral-color('black');\n  border: 4px dashed #333;\n  height:200px;\n  line-height: 200px;\n  text-align:center;\n\n  @media only screen and (min-width: #{$hero-layout-2-smallest-large-device-size}) {\n    background-color: transparent;\n  }\n}\n\n*[id*='atoms-link-(inverse)'] {\n  background-color: get-brand-color();\n}\n\n.demo-animate {\n  background: #ddd;\n  padding: 1em;\n  margin-bottom: 1em;\n  text-align: center;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.sg-colors {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  list-style: none !important;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n.sg-colors li {\n  -webkit-box-flex: 1;\n      -ms-flex: auto;\n          flex: auto;\n  padding: 0.3em;\n  margin: 0 0.5em 0.5em 0;\n  min-width: 5em;\n  max-width: 17em;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n}\n\n.sg-swatch {\n  display: block;\n  height: 4em;\n  margin-bottom: 0.3em;\n  border-radius: 5px;\n}\n\n.sg-label {\n  font-size: 90%;\n  line-height: 1;\n}\n\n#patternlab-screen-size {\n  background: get-brand-color();\n  font-weight: bold;\n  opacity: 0.5;\n  padding: $standard-gutter/4 $standard-gutter;\n  position: fixed;\n  right: $standard-gutter * 2;\n  top: $standard-gutter;\n  z-index: 5;\n\n  &::before {\n    content: 'mobile';\n  }\n\n  @include breakpoint(phablet) {\n    &::before {\n      content: 'phablet';\n    }\n  }\n\n  @include breakpoint(tablet) {\n    &::before {\n      content: 'tablet';\n    }\n  }\n\n  @include breakpoint(laptop) {\n    &::before {\n      content: 'laptop';\n    }\n  }\n\n  @include breakpoint(desktop) {\n    &::before {\n      content: 'desktop';\n    }\n  }\n}\n\n.sg-tabs-panel {\n  min-height: 20em !important;\n}","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n"]}