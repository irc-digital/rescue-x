{"version":3,"sources":["05-components/30-images/20-image-well-width/rplc-image-well-width.scss","../scss/abstract/_rem.scss","05-components/30-images/_rplc-images.shared.scss","../scss/abstract/_mixins.scss"],"names":[],"mappings":"AAGA;EAEE,kBAAiB;EACjB,mBAAkB;EAClB,mBC6B0D,EDd3D;EAbC;IACE,eAAc,EACf;EAED;IEMA,kBAAiB;IACjB,mBAAkB;IAClB,iBDe0D;ICd1D,iBAAoD;IACpD,mBAAkB;IAClB,WAAuB;IACvB,0BAAyC,EFVxC;IG+BC;MHjCF;QEeE,WAA4B;QAC5B,0BAA8C,EFd/C,EAAA","file":"rplc-image-well-width.css","sourcesContent":["@import '../rplc-images.shared';\n@import 'rplc-image-well-width.variables';\n\n.rplc-image-well-width {\n\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $well-width-inner;\n\n  &__image-wrapper {\n    line-height: 0;\n  }\n\n  &__caption-wrapper {\n    @include image-caption-common-treatment-fluid;\n  }\n\n  // todo: modifiers\n  //  &--caption-low-key {\n  //    @include breakpoint(tablet) {\n  //    }\n  //  }\n}\n\n// end of file\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n","@import '../../../scss/core';\n\n@mixin image-caption-common-treatment-fixed {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: rem(376px);\n  position: relative;\n  top: -#{get-spacing()};\n\n  @include breakpoint(phablet) {\n    align-items: center;\n    display: flex;\n    height: 100%;\n    position: absolute;\n    top: 0;\n  }\n}\n\n@mixin image-caption-common-treatment-fluid {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: rem(864px);\n  min-width: $minimum-size-width - (2 * get-spacing());\n  position: relative;\n  top: -#{get-spacing()};\n  width: calc(100vw - #{2 * get-spacing()});\n\n  @include breakpoint(phablet) {\n    top: -#{get-spacing('xxl')};\n    width: calc(100vw - #{2 * get-spacing('xxl')});\n  }\n}\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: get-spacing();\n  padding-right: get-spacing();\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n"]}