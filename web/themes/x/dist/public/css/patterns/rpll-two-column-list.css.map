{"version":3,"sources":["10-layouts/05-two-column-list/rpll-two-column-list.scss","../scss/abstract/_mixins.scss"],"names":[],"mappings":"AAEA,sBAGE,gBAAA,KACA,aAAA,ECkCE,2CDtCJ,sBAOI,QAAA,KACA,gBAAA,KACA,aAAA,KACA,sBAAA,IAAA,KAGF,4BACE,cAAA,KCwBA,2CDzBF,4BAII,cAAA,GCqBF,2CDjBD,4EAIO,gBAAA,EACA,kBAAA,GCgBN,yCDVF,uCAEI,QAAA,KACA,gBAAA,KACA,aAAA,EACA,sBAAA,IAAA,KALH,mEASG,cAAA,IAAA,MAAA,QACA,cAAA,EACA,eAAA,KACA,YAAA,KCFF,yCDVD,gFAAA,gFAiBO,WAAA,IAAA,MAAA","file":"rpll-two-column-list.css","sourcesContent":["@import 'rpll-two-column-list.variables';\n\n.rpll-two-column-list {\n  $self: &;\n\n  list-style-type: none;\n  padding-left: 0;\n\n  @include breakpoint(desktop) {\n    display: grid;\n    grid-column-gap: $two-column-list-column-gutter;\n    grid-row-gap: $two-column-list-row-gutter;\n    grid-template-columns: 1fr 1fr;\n  }\n\n  &__item {\n    margin-bottom: $two-column-list-stacked-margin-bottom;\n\n    @include breakpoint(desktop) {\n      margin-bottom: 0;\n    }\n  }\n\n  &--highlighted {\n    #{ $self }__item {\n      &:nth-child(1) {\n        @include breakpoint(desktop) {\n          grid-column-end: 3;\n          grid-column-start: 1;\n        }\n      }\n    }\n  }\n\n  &--plus-separators {\n    @include breakpoint(tablet) { // hold the grid longer when we are doing this version\n      display: grid;\n      grid-column-gap: $two-column-list-column-gutter;\n      grid-row-gap: 0;\n      grid-template-columns: 1fr 1fr;\n    }\n\n    #{ $self }__item {\n      border-bottom: 1px solid get-neutral-color('gray');\n      margin-bottom: 0;\n      padding-bottom: get-spacing();\n      padding-top: get-spacing();\n\n      @include breakpoint(tablet) {\n        &:nth-child(1),\n        &:nth-child(2) {\n          border-top: 1px solid get-neutral-color('gray');\n        }\n      }\n    }\n  }\n}\n\n// end of file\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: get-spacing();\n  padding-right: get-spacing();\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n"]}