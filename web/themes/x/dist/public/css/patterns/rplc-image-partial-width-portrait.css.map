{"version":3,"sources":["05-components/30-images/15-image-partial-width-portrait/rplc-image-partial-width-portrait.scss","05-components/30-images/_rplc-images.shared.scss","../scss/abstract/_rem.scss"],"names":[],"mappings":"AAKE;EACE,eAAc,EACf;;AAED;ECNA,kBAAiB;EACjB,mBAAkB;EAClB,mBC+B0D;ED9B1D,mBAAkB;EAClB,WAAuB,EDItB","file":"rplc-image-partial-width-portrait.css","sourcesContent":["@import 'rplc-image-partial-width-portrait.variables';\n@import '../rplc-images.shared';\n\n.rplc-image-partial-width-portrait {\n\n  &__image-wrapper {\n    line-height: 0;\n  }\n\n  &__caption-wrapper {\n    @include image-mobile-caption-shared;\n  }\n\n  // todo: modifiers\n  //  &--caption-right {\n  //  }\n}\n\n// end of file\n","@import '../../../scss/core';\n\n@mixin image-mobile-caption-shared {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: rem(376px);\n  position: relative;\n  top: -#{get-spacing()};\n}\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n"]}