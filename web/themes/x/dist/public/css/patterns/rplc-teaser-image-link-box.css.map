{"version":3,"sources":["05-components/05-teasers/20-image-link-box/rplc-teaser-image-link-box.scss","../scss/x.tier-1.scss","05-components/05-teasers/20-image-link-box/_rplc-teaser-image-link-box.variables.scss","../scss/helpers/_rem.scss"],"names":[],"mappings":"AAEA;EAGE,aAAY,EA2Fb;EAzFC;IACE,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,aAAY;IACZ,sBAAqB,EACtB;EAED;IACE,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,6BAAsB;IAAtB,8BAAsB;QAAtB,2BAAsB;YAAtB,uBAAsB;IACtB,UAAS,EACV;EAED;IACE,6TAA4T,EAE7T;EAED;IACE,uBCHW;IDIX,sCCZc;IDad,YCCW;IDCX,qBEvByC;IFwBzC,iBAAgB;IAChB,2BAA0B;IAC1B,mBAAkB;IAClB,WE3ByC;IF4BzC,yBAA6E,EAC9E;EAED;IACE,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,oBAAO;QAAP,YAAO;YAAP,QAAO;IACP,kBAAiB;IACjB,mBAAkB;IAClB,mBGNwD,EHOzD;EAED;IACE,eAAc,EACf;EA7CH;IAiDM,0BCrCY,EDsCb;EAlDL;IAqDM,wUAAuU,EACxU;EAGF;IAEG,6BC5BU,ED6BX;EAHF;IAOK,0BCjCQ;IDkCR,YC7CO,ED8CR;EAIL;IACE;MACE,eAAc;MACd,gBAAe;MACf,gBAAe,EAEhB;IAED;MACE,gBExEyF;MFyEzF,iBAAgB;MAChB,YAAW,EACZ;IAED;MACE,oBGnDsD;UHmDtD,oBGnDsD;cHmDtD,gBGnDsD,EHoDvD;IAED;MACE,qBAAa;MAAb,qBAAa;MAAb,cAAa;MACb,+BAAmB;MAAnB,8BAAmB;UAAnB,wBAAmB;cAAnB,oBAAmB;MACnB,YAAW,EACZ,EAAA","file":"rplc-teaser-image-link-box.css","sourcesContent":["@import 'rplc-teaser-image-link-box.variables';\n\n.rplc-teaser-image-link-box {\n  $self: &;\n\n  height: 100%;\n\n  &__wrapper-link {\n    display: flex;\n    height: 100%;\n    text-decoration: none;\n  }\n\n  &__inner-wrapper {\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n  }\n\n  &__title {\n    background: url('data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%228.529%22%20height%3D%2213%22%20viewBox%3D%220%200%208.529%2013%22%3E%3Cpath%20d%3D%22M2.03%200L0%202.03%204.47%206.5%200%2010.97%202.03%2013l6.5-6.5%22%2F%3E%3C%2Fsvg%3E') right center no-repeat;\n    //letter-spacing: -1.25px; // todo when we figure out letter spacing etc\n  }\n\n  &__caption-wrapper {\n    background-color: neutral-color('white');\n    border-bottom: $teaser-image-link-box-caption-bottom-border-size solid $teaser-image-link-box-default-decoration-color;\n    color: neutral-color('black');\n    //line-height: 1.2; // todo when we figure out line heights etc\n    margin: 0 auto $teaser-image-link-box-caption-eats-in;\n    overflow: hidden;\n    padding: 1.25rem 2.0625rem;\n    position: relative;\n    top: $teaser-image-link-box-caption-eats-in;\n    width: calc(100% - #{$teaser-image-link-box-caption-total-horizontal-margin});\n  }\n\n  &__text-wrapper {\n    display: flex;\n    flex: 1;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: $teaser-image-link-box-text-area-max-width;\n  }\n\n  &__image-wrapper {\n    line-height: 0;\n  }\n\n  &:hover {\n    #{ $self }__caption-wrapper {\n      background-color: $teaser-image-link-box-default-decoration-color;\n    }\n\n    #{ $self }__title {\n      background-image: url('data:image/svg+xml;charset=utf8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%228.529%22%20height%3D%2213%22%20viewBox%3D%220%200%208.529%2013%22%3E%3Cpath%20d%3D%22M2.03%200L0%202.03%204.47%206.5%200%2010.97%202.03%2013l6.5-6.5%22%20fill%3D%22%23ffffff%22%20%2F%3E%3C%2Fsvg%3E');\n    }\n  }\n\n  &--style-alert {\n    #{ $self }__caption-wrapper {\n      border-bottom-color: $teaser-image-link-box-alert-decoration-color;\n    }\n\n    &:hover {\n      #{ $self }__caption-wrapper {\n        background-color: $teaser-image-link-box-alert-decoration-color;\n        color: neutral-color('white');\n      }\n    }\n  }\n\n  @media only screen and (min-width: #{$smallest-phablet-size}) and (max-width: #{$smallest-desktop-size-less-gutters}) {\n    &__text-wrapper {\n      margin-left: 0;\n      margin-right: 0;\n      max-width: none;\n      //width: 100%;\n    }\n\n    &__caption-wrapper {\n      height: $teaser-image-link-box-caption-height-tablet;\n      position: static;\n      width: 100%;\n    }\n\n    &__image-wrapper {\n      flex: 0 0 $teaser-image-link-box-image-width-tablet;\n    }\n\n    &__inner-wrapper {\n      display: flex;\n      flex-direction: row;\n      width: 100%;\n    }\n  }\n}\n\n// end of file\n","//\n// Tier 1 variables\n//\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n$color-brand: (\n  primary: #fdc513,\n  primary-tint-1: #ffd44b,\n  primary-tint-2: #ffd960,\n);\n$color-brand-x: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', $color-brand, (prefix: '{ \"color_brand\":', suffix: '}'));\n\n// sass-lint:disable no-color-keywords\n$color-neutral: (\n  'white': #fff,\n  'very-light-gray': #f6f6f6,\n  'light-gray': #e9e9e9,\n  'gray': #d1d1d1,\n  'dark-gray': #666,\n  'very-dark-gray': #383838,\n  'black': #000,\n);\n$color-neutral-x: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', $color-neutral, (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n$color-utility: (\n  alert: #ee2d14,\n);\n$color-utility-x: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', $color-utility, (prefix: '{ \"color_utility\":', suffix: '}'));\n\n//\n// Font size\n//\n$font-size: (\n  m: 1.125rem, // 18px\n  m-1: 1.25rem, // 20px\n  l: 1.625rem,  // 26px\n  l-1: 2.25rem,  // 36px\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$font-size-x: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', $font-size, (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n$line-height: (\n  s: 1,\n  s-1: 1.2,\n  m: 1.6,\n  m-1: 1.75,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$line-height-x: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', $line-height, (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n$letter-spacing: (\n  compact: -.03em,\n  standard: -.01em,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$letter-spacing-x: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', $letter-spacing, (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n$font-weight: (\n  light: 300,\n  normal: 400,\n  bold: 700,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$font-weight-x: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', $font-weight, (prefix: '{ \"font_weight\":', suffix: '}'));\n\n// end of file\n","@import '../../../../scss/core';\n\n$teaser-image-link-box-default-decoration-color: brand-color();\n$teaser-image-link-box-alert-decoration-color: utility-color('alert');\n$teaser-image-link-box-caption-bottom-border-size: rem(6px);\n$teaser-image-link-box-caption-total-horizontal-margin: $standard-horizontal-margin-accounting-for-gutters;\n$teaser-image-link-box-caption-eats-in: -4rem;\n$teaser-image-link-box-text-area-max-width: rem(376px);\n$teaser-image-link-box-image-width-tablet: rem(288px);\n$teaser-image-link-box-caption-height-tablet: $teaser-image-link-box-image-width-tablet / 4 * 3;\n\n// end of file\n\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n"]}