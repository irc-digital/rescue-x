{"version":3,"sources":["05-components/05-teasers/50-simple-image-link/rplc-teaser-simple-image-link.scss","../scss/abstract/_mixins.scss"],"names":[],"mappings":"AAKE;EACE,sBAAqB,EACtB;;AAED;EACE,eAAc;EACd,kBAAiB;EACjB,mBAAkB;EAClB,kBAAiB;EACjB,iBAAgB;EAChB,iBAAgB,EACjB;;AAED;EACE,mBAAkB,EACnB;;AAEA;EAEG,cAAa,EAKd;ECiBD;IDxBD;MAKK,eAAc,EAEjB,EAAA;;AAGF;EAEG,cAAa,EACd","file":"rplc-teaser-simple-image-link.css","sourcesContent":["@import 'rplc-teaser-simple-image-link.variables';\n\n.rplc-teaser-simple-image-link {\n  $self: &;\n\n  &__wrapper-link {\n    text-decoration: none;\n  }\n\n  &__image-wrapper {\n    line-height: 0;\n    margin-left: auto;\n    margin-right: auto;\n    max-height: 150px;\n    max-width: 150px;\n    overflow: hidden;\n  }\n\n  &__text-wrapper {\n    text-align: center;\n  }\n\n  &--display-images-not-on-mobile {\n    #{ $self }__image-wrapper {\n      display: none;\n\n      @include breakpoint(phablet) {\n        display: block;\n      }\n    }\n  }\n\n  &--display-images-never {\n    #{ $self }__image-wrapper {\n      display: none;\n    }\n  }\n}\n\n// end of file\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n@function get-brand-color($option: 'primary') {\n  @return map-get($color-brand, $option);\n}\n\n@function get-neutral-color($option: 'gray') {\n  @return map-get($color-neutral, $option);\n}\n\n@function get-utility-color($option: 'alert') {\n  @return map-get($color-utility, $option);\n}\n\n@mixin font-size($option: 'm') {\n  font-size: map-get($font-size, $option);\n}\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: map-get($letter-spacing, $option);\n}\n\n@mixin font-weight($option: 'normal') {\n  font-weight: map-get($font-weight, $option);\n}\n\n@mixin line-height($option: 'm') {\n  line-height: map-get($line-height, $option);\n}\n\n// end of file\n"]}