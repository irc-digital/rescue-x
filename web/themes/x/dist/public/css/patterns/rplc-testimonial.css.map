{"version":3,"sources":["05-components/12-testimonial/rplc-testimonial.scss","../scss/abstract/_mixins.scss","../scss/rpl.tier-1.scss"],"names":[],"mappings":"AAEA,kBAEE,YAAA,KACA,aAAA,KACA,UAAA,QAEA,2BCIA,YAAA,KACA,aAAA,KACA,UAAA,QACA,aAAA,KACA,cAAA,KDLE,iBAAA,QC+BA,yCDlCF,2BAKI,iBAAA,aAIJ,2BACE,iBAAA,QACA,QAAA,OAAA,EC2BA,8CD7BF,2BAKI,QAAA,KAAA,MAIJ,yBE+FA,UAAA,QA+EA,YAAA,IAzBA,eAAA,OAxBA,YAAA,IF3HE,cAAA,KCkBA,8CDpBF,yBE+FA,UAAA,SF1FA,yBACE,SAAA,SADD,iCAIG,WAAA,2gBAAA,UAAA,OAAA,OACA,gBAAA,UACA,QAAA,GACA,QAAA,MACA,OAAA,UACA,KAAA,UACA,SAAA,SACA,IAAA,UACA,MAAA,UCGF,8CDfD,iCAeK,gBAAA,UACA,OAAA,UACA,KAAA,UACA,MAAA,WCPJ,yCDXF,yBAsBI,YAAA,MAIJ,8BEgEA,UAAA,SA+EA,YAAA,IAzBA,eAAA,OAxBA,YAAA,IA0EA,WAAA,OFrKE,cAAA,KCdA,8CDWF,8BEgEA,UAAA,QA8BA,YAAA,MFxFA,iCACE,QAAA,YAAA,QAAA,YAAA,QAAA,KACA,mBAAA,SAAA,sBAAA,OAAA,mBAAA,OAAA,eAAA,OACA,aAAA,KCpBA,8CDiBF,iCAKI,aAAA,MC1BF,yCDqBF,iCAQI,mBAAA,WAAA,sBAAA,OAAA,mBAAA,IAAA,eAAA,KC7BF,yCDiCF,sCAEI,YAAA,IACA,MAAA,KCpCF,yCDwCF,gCAEI,MAAA","file":"rplc-testimonial.css","sourcesContent":["@import 'rplc-testimonial.variables';\n\n.rplc-testimonial {\n  $self: &;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: rem(1080px);\n\n  &__content {\n    @include standard-row;\n    // TODO: This seems wrong. How to deal with full-width elements?\n    background-color: get-neutral-color('light-gray');\n    @include breakpoint(laptop) {\n      background-color: transparent;\n    }\n  }\n\n  &__wrapper {\n    background-color: get-neutral-color('light-gray');\n    padding: $testimonial-wrapper-padding-vertical-mobile 0;\n    // TODO: How best to line the header up with the section heading molecule?\n    @include breakpoint(phablet) {\n      padding: $testimonial-wrapper-padding-vertical-phablet $testimonial-wrapper-padding-horizontal-phablet;\n    }\n  }\n\n  &__title {\n    @include typography-heading-extra-large-light;\n    margin-bottom: $testimonial-title-margin;\n  }\n\n  &__quote {\n    position: relative;\n\n    &::before {\n      background: url('data:image/svg+xml,%3Csvg%20viewBox%3D%220%200%2064%2064%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20stroke-linejoin%3D%22round%22%20stroke-miterlimit%3D%221.414%22%3E%3Cpath%20d%3D%22M11.8%2048.3V33c0-10.8%205.3-18.5%2016.3-20.1v7.3c-5.6%201.7-6.4%205.5-6.5%2010.8h6.5v17.3H11.8zm23.8%200V33c0-10.8%205.4-18.5%2016.3-20.1v7.3c-5.6%201.7-6.4%205.5-6.5%2010.8h6.5v17.3H35.6z%22%20fill%3D%22%23fdc513%22%20fill-rule%3D%22nonzero%22%2F%3E%3C%2Fsvg%3E') no-repeat center center;\n      background-size: $testimonial-quote-icon-size-mobile;\n      content: '';\n      display: block;\n      height: $testimonial-quote-icon-size-mobile;\n      left: $testimonial-quote-icon-offset-left-mobile;\n      position: absolute;\n      top: $testimonial-quote-icon-offset-top-mobile;\n      width: $testimonial-quote-icon-size-mobile;\n\n      @include breakpoint(phablet) {\n        background-size: $testimonial-quote-icon-size-phablet;\n        height: $testimonial-quote-icon-size-phablet;\n        left: $testimonial-quote-icon-offset-left-phablet;\n        width: $testimonial-quote-icon-size-phablet;\n      }\n    }\n    @include breakpoint(laptop) {\n      margin-left: $testimonial-quote-offset-left-laptop;\n    }\n  }\n\n  &__quote-text {\n    @include typography-text-standard;\n    @include font-style('italic');\n    margin-bottom: $testimonial-quote-text-margin-mobile;\n  }\n\n  &__quote-wrapper {\n    display: flex;\n    flex-direction: column;\n    padding-left: $testimonial-quote-wrapper-padding-mobile;\n    @include breakpoint(phablet) {\n      padding-left: $testimonial-quote-wrapper-padding-phablet;\n    }\n    @include breakpoint(laptop) {\n      flex-direction: row;\n    }\n  }\n\n  &__quote-text-wrapper {\n    @include breakpoint(laptop) {\n      margin-left: $testimonial-quote-text-wrapper-offset-laptop;\n      width: $testimonial-quote-text-wrapper-width-laptop;\n    }\n  }\n\n  &__link-wrapper {\n    @include breakpoint(laptop) {\n      width: $testimonial-link-wrapper-width-laptop;\n    }\n  }\n\n}\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: get-spacing();\n  padding-right: get-spacing();\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n","//\n// Tier 1 variables\n//\n// The main purpose of tier 1 is to set out the values for single CSS properties concepts, such as font size and color.\n//\n// This file is, essentially, a bunch of enumerations and represent the very core building blocks of the visual system.\n//\n// The enumerations are deliberately a little obfuscates to avoid direct array access. Access should all go through\n// the specific accessor function and/or mixin provided for each.\n//\n//\n\n@function safe-map-get($map, $option) {\n  @if map-has-key($map, $option) {\n    @return map-get($map, $option);\n  } @else {\n    @error '#{$map} does not contain the key #{$option}';\n    @return null;\n  }\n}\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n//\n// Function to get a brand color\n//\n@function get-brand-color($option: 'primary') {\n  $brand-colors: (\n    'primary': #fdc513,\n    'primary-tint-1': #ffd44b,\n    'primary-tint-2': #ffd960,\n  );\n\n  @if $option != 'all' {\n    @return safe-map-get($brand-colors, $option);\n  } @else {\n    @return $brand-colors;\n  }\n}\n\n// generates a JSON array of brand colors to be used by PatternLab\n$xxx-bc: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', get-brand-color('all'), (prefix: '{ \"color_brand\":', suffix: '}'));\n\n//\n// Function to get a neutral color\n//\n@function get-neutral-color($option: 'gray') {\n  $neutral-colors: (\n    'white': #fff,\n    'very-light-gray': #f6f6f6,\n    'light-gray': #e9e9e9,\n    'gray': #d1d1d1,\n    'dark-gray': #666,\n    'very-dark-gray': #383838,\n    'black': #000,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($neutral-colors, $option);\n  } @else {\n    @return $neutral-colors;\n  }\n}\n\n// generates a JSON array of neutral colors to be used by PatternLab\n$xxx-nc: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', get-neutral-color('all'), (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n//\n// Function to get a utility color\n//\n@function get-utility-color($option: 'alert') {\n  $utility-colors: (\n    'alert': #ee2d14,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($utility-colors, $option);\n  } @else {\n    @return $utility-colors;\n  }\n}\n// generates a JSON array of utility colors to be used by PatternLab\n$xxx-uc: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', get-utility-color('all'), (prefix: '{ \"color_utility\":', suffix: '}'));\n\n\n//\n// Font size\n//\n\n// Function to get a font size value from its array entry key\n@function get-font-size($option: 'm') {\n  // don't panic - these get converted to rem when they are returned\n  $font-sizes: (\n    'xxs': 12px,\n    'xs': 14px,\n    's': 16px,\n    'm': 18px,\n    'ml': 20px,\n    'l': 24px,\n    'xl': 28px,\n    'xxl': 36px,\n    'xxxl': 44px,\n    'xxxxl': 52px,\n    'xxxxxl': 60px,\n  );\n  @if $option != 'all' {\n    @return rem(safe-map-get($font-sizes, $option));\n  } @else {\n    @return $font-sizes;\n  }\n}\n\n//\n// Font size mixin\n//\n@mixin font-size($option: 'm') {\n  font-size: get-font-size($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fs: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', get-font-size('all'), (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n\n// Function to get a line height value from its array entry key\n@function get-line-height($option: 'm') {\n  $line-heights: (\n    'xxs': 1,\n    'xs': 1.2,\n    's': 1.4,\n    'm': 1.6,\n    'l': 1.75,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($line-heights, $option);\n  } @else {\n    @return $line-heights;\n  }\n}\n\n//\n// Line height mixin\n//\n@mixin line-height($option: 'm') {\n  line-height: get-line-height($option);\n}\n\n// generates a JSON array of line heights to be used by PatternLab\n$xxx-lh: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', get-line-height('all'), (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n\n// Function to get a letter spacing value from its array entry key\n@function get-letter-spacing($option: 'standard') {\n  $letter-spacings: (\n    'compact': -.03em,\n    'standard': -.01em,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($letter-spacings, $option);\n  } @else {\n    @return $letter-spacings;\n  }\n}\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: get-letter-spacing($option);\n}\n\n// generates a JSON array of letter spacing to be used by PatternLab\n$xxx-ls: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', get-letter-spacing('all'), (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n\n// Function to get a font weight value from its array entry key\n@function get-font-weight($option: 'normal') {\n  $font-weights: (\n    'light': 300,\n    'normal': 400,\n    'bold': 700,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-weights, $option);\n  } @else {\n    @return $font-weights;\n  }\n}\n\n@mixin font-weight($option: 'normal') {\n  font-weight: get-font-weight($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fw: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', get-font-weight('all'), (prefix: '{ \"font_weight\":', suffix: '}'));\n\n//\n// Font style\n//\n\n// Function to get a font style value\n@function get-font-style($option: 'normal') {\n  $font-styles: (\n    'normal': 'normal',\n    'italic': 'italic',\n    'oblique': 'oblique',\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-styles, $option);\n  } @else {\n    @return $font-styles;\n  }\n}\n\n@mixin font-style($option: 'normal') {\n  font-style: get-font-style($option);\n}\n\n// generates a JSON array of font style to be used by PatternLab\n$xxx-fst: export('dist/source/_patterns/00-subatoms/27-font-style/font-style.json', get-font-weight('all'), (prefix: '{ \"font_style\":', suffix: '}'));\n\n// Function to get a spacing value from its array entry key\n@function get-spacing($option: 'm') {\n  // don't panic - these get converted to rem when they are returned\n  $space-unit: 16px;\n  $spacings: (\n    'xs': $space-unit / 4, // 4px\n    's': $space-unit / 2, // 8px\n    'm': $space-unit,  // 16px\n    'ml': 1.5 * $space-unit, // 24px\n    'l': 2 * $space-unit, // 32px\n    'xl': 3 * $space-unit, // 48px\n    'xxl': 4 * $space-unit, // 64px\n    'xxxl': 5 * $space-unit, // 80px\n  );\n  @if $option != 'all' {\n    @return rem(safe-map-get($spacings, $option));\n  } @else {\n    @return $spacings;\n  }\n}\n// generates a JSON array of spacing to be used by PatternLab\n$xxx-spac: export('dist/source/_patterns/00-subatoms/30-spacing/spacing.json', get-spacing('all'), (prefix: '{ \"spacing\":', suffix: '}'));\n\n\n// end of file\n\n"]}