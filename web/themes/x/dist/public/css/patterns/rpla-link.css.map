{"version":3,"sources":["01-atoms/03-links/05-link/rpla-link.scss","../scss/_x.tier-1.scss","../scss/_x.tier-2.scss","../scss/abstract/_mixins.scss"],"names":[],"mappings":"AAEA,0CCiME,YAAA,ICtHA,cAAA,IAAA,MAAA,QACA,QAAA,OF5EF,gDEsEE,iBAAA,QF/DA,wBC0LA,YAAA,IC5GA,cAAA,IAAA,MAAA,QACA,QAAA,OF/EC,8BEkFC,MAAA,QF9EF,0BCsLA,YAAA,IC9FA,cAAA,IAAA,MAAA,KACA,QAAA,OFzFC,gCEmFD,iBAAA,KF/EA,6BCoGA,UAAA,QEvEE,8CH7BF,6BCoGA,UAAA","file":"rpla-link.css","sourcesContent":["@import 'rpla-link.variables';\n\n.rpla-link {\n  $self: &;\n\n  &:not([class*='rpla-link--style']) {\n    @include typography-link-standard;\n  }\n\n  &--style-alert {\n    @include typography-link-alert;\n  }\n\n  &--style-inverse {\n    @include typography-link-inverse;\n  }\n\n  &--size-extra-small {\n    @include typography-text-extra-small;\n  }\n}\n","//\n// Tier 1 variables\n//\n// The main purpose of tier 1 is to set out the values for single CSS properties concepts, such as font size and color.\n//\n// This file is, essentially, a bunch of enumerations and represent the very core building blocks of the visual system.\n//\n// The enumerations are deliberately a little obfuscates to avoid direct array access. Access should all go through\n// the specific accessor function and/or mixin provided for each.\n//\n//\n\n@function safe-map-get($map, $option) {\n  @if map-has-key($map, $option) {\n    @return map-get($map, $option);\n  } @else {\n    @error '#{$map} does not contain the key #{$option}';\n    @return null;\n  }\n}\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n//\n// Function to get a brand color\n//\n@function get-brand-color($option: 'primary') {\n  $brand-colors: (\n    'primary': #fdc513,\n    'primary-tint-1': #ffd44b,\n    'primary-tint-2': #ffd960,\n  );\n\n  @if $option != 'all' {\n    @return safe-map-get($brand-colors, $option);\n  } @else {\n    @return $brand-colors;\n  }\n}\n\n// generates a JSON array of brand colors to be used by PatternLab\n$xxx-bc: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', get-brand-color('all'), (prefix: '{ \"color_brand\":', suffix: '}'));\n\n//\n// Function to get a neutral color\n//\n@function get-neutral-color($option: 'gray') {\n  $neutral-colors: (\n    'white': #fff,\n    'very-light-gray': #f6f6f6,\n    'light-gray': #e9e9e9,\n    'gray': #d1d1d1,\n    'dark-gray': #666,\n    'very-dark-gray': #383838,\n    'black': #000,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($neutral-colors, $option);\n  } @else {\n    @return $neutral-colors;\n  }\n}\n\n// generates a JSON array of neutral colors to be used by PatternLab\n$xxx-nc: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', get-neutral-color('all'), (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n//\n// Function to get a utility color\n//\n@function get-utility-color($option: 'alert') {\n  $utility-colors: (\n    'alert': #ee2d14,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($utility-colors, $option);\n  } @else {\n    @return $utility-colors;\n  }\n}\n// generates a JSON array of utility colors to be used by PatternLab\n$xxx-uc: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', get-utility-color('all'), (prefix: '{ \"color_utility\":', suffix: '}'));\n\n\n//\n// Font size\n//\n\n// Function to get a font size value from its array entry key\n@function get-font-size($option: 'm') {\n  $font-sizes: (\n    'xxs': rem(12px),\n    'xs': rem(14px),\n    's': rem(16px),\n    'm': rem(18px),\n    'ml': rem(20px),\n    'l': rem(24px),\n    'xl': rem(28px),\n    'xxl': rem(36px),\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-sizes, $option);\n  } @else {\n    @return $font-sizes;\n  }\n}\n\n//\n// Font size mixin\n//\n@mixin font-size($option: 'm') {\n  font-size: get-font-size($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fs: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', get-font-size('all'), (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n\n// Function to get a line height value from its array entry key\n@function get-line-height($option: 'm') {\n  $line-heights: (\n    's': 1,\n    's-1': 1.2,\n    'm': 1.6,\n    'm-1': 1.75,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($line-heights, $option);\n  } @else {\n    @return $line-heights;\n  }\n}\n\n//\n// Line height mixin\n//\n@mixin line-height($option: 'm') {\n  line-height: get-line-height($option);\n}\n\n// generates a JSON array of line heights to be used by PatternLab\n$xxx-lh: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', get-line-height('all'), (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n\n// Function to get a letter spacing value from its array entry key\n@function get-letter-spacing($option: 'm') {\n  $letter-spacings: (\n    'compact': -.03em,\n    'standard': -.01em,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($letter-spacings, $option);\n  } @else {\n    @return $letter-spacings;\n  }\n}\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: get-letter-spacing($option);\n}\n\n// generates a JSON array of letter spacing to be used by PatternLab\n$xxx-ls: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', get-letter-spacing('all'), (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n\n// Function to get a font weight value from its array entry key\n@function get-font-weight($option: 'm') {\n  $font-weights: (\n    'light': 300,\n    'normal': 400,\n    'bold': 700,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-weights, $option);\n  } @else {\n    @return $font-weights;\n  }\n}\n\n@mixin font-weight($option: 'normal') {\n  font-weight: get-font-weight($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fw: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', get-font-weight('all'), (prefix: '{ \"font_weight\":', suffix: '}'));\n\n\n// end of file\n\n","//\n// Tier 2 variables\n//\n\n@import 'x.tier-1';\n@import 'abstract/mixins';\n\n@function is-not-in-list ($list, $value) {\n  @return index($list, $value) == null;\n}\n\n@mixin typography-text-extra-small {\n  @include font-size('xs');\n\n  @include breakpoint(phablet) {\n    @include font-size('s');\n  }\n}\n\n//\n// Small text mixin. Outputs with a small (s) font size on mobile and a medium  on other devices\n//\n// The responds arguments allows some control over the upsizing on non-mobile devices. You may pass in 'ml' to\n// increase the font size to medium-large, rather than medium.\n//\n@mixin typography-text-small ($responds: 'm') {\n  @if is-not-in-list(('m', 'ml'), $responds) {\n    @error '#{$responds} is not a legitimate parameter';\n  }\n\n  @include font-size('s');\n  @include font-weight('light');\n\n  @include breakpoint(phablet) {\n    @include font-size($responds);\n  }\n}\n\n@mixin typography-text-standard {\n  @include font-size('m');\n  @include font-weight('light');\n  @include letter-spacing('standard');\n  @include line-height('m');\n\n  @include breakpoint(phablet) {\n    @include font-size('ml');\n    @include line-height('m-1');\n  }\n}\n\n//\n// Large text mixin. Outputs with a medium-large font size on mobile and a large font size on other devices\n//\n// The responds arguments allows some control over the upsizing on non-mobile devices. You may pass in 'ml' to\n// prevent any upsizing.\n//\n@mixin typography-text-large ($responds: 'l') {\n  @if is-not-in-list(('ml', 'l'), $responds) {\n    @error '#{$responds} is not a legitimate parameter';\n  }\n\n  @include font-size('ml');\n\n  @if $responds == 'l' {\n    @include breakpoint(phablet) {\n      @include font-size($responds);\n      @include line-height('m');\n    }\n  }\n}\n\n@mixin typography-link-standard-hover {\n  background-color: get-brand-color();\n}\n\n@mixin typography-link-standard {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-brand-color();\n  display: inline;\n\n  &:hover {\n    @include typography-link-standard-hover;\n  }\n}\n\n@mixin typography-link-alert {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-utility-color('alert');\n  display: inline;\n\n  &:hover {\n    color: get-utility-color('alert');\n  }\n}\n\n@mixin typography-link-inverse-hover {\n  background-color: get-neutral-color('white');\n}\n\n@mixin typography-link-inverse {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-neutral-color('white');\n  display: inline;\n\n  &:hover {\n    @include typography-link-inverse-hover;\n  }\n}\n\n// Medium large on mobile, Extra large on bigger devices\n@mixin typography-heading-medium-large {\n  @include font-size('ml');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('xl');\n  }\n}\n\n// Large on mobile, Extra extra large on bigger devices\n@mixin typography-heading-large {\n  @include font-size('l');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('xxl');\n  }\n}\n\n// Extra large on mobile, Extra extra large on bigger devices\n@mixin typography-heading-extra-large {\n  @include font-size('xl');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('xxl');\n  }\n}\n\n// end of file\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n"]}