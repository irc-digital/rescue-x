{"version":3,"sources":["05-components/05-teasers/05-standard/rplc-teaser-standard.scss","../scss/x.tier-1.scss","../scss/abstract/_rem.scss","../scss/x.tier-2.scss","../scss/abstract/_mixins.scss"],"names":[],"mappings":"AAEA;EAGE,aAAY,EAgDb;EA9CC;IACE,oBAAO;QAAP,YAAO;YAAP,QAAO,EACR;EAED;IC2GA,gBClF0D;IDgK1D,iBAZc;IArCd,iBAfY;IAgEZ,iBAVa;IE/Fb,iCFxDoB;IEyDpB,gBAAe;IH9Eb,2BAAsB;QAAtB,uBAAsB;IACtB,sBEqBwD,EFfzD;IIyBC;MJnCF;QC2GA,oBClF0D,EFfzD,EAAA;IAVA;MG2ED,0BFnDoB,EE6DnB;IClDC;MJnCF;QC2GA,oBClF0D;QDgK1D,iBAZc;QAbd,wBAVoB;QAdpB,iBAdU;QA+DV,iBAVa;QE/Fb,iCFxDoB;QEyDpB,gBAAe,EHvEd,EAAA;EIyBC;IJnCF;MC2GA,mBClF0D;MD+G1D,kBAba,EDjHZ,EAAA;IIyBC;QJnCD;UG2ED,0BFnDoB,EE6DnB,EAAA;EHzED;IACE,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,6BAAsB;IAAtB,8BAAsB;QAAtB,2BAAsB;YAAtB,uBAAsB;IACtB,aAAY,EAOb;IAVA;MG+DD,0BFnDoB,EDJf;EAIL;IACE,eAAc,EACf;EAED;IACE,uBCea;IDdb,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,oBAAO;QAAP,YAAO;YAAP,QAAO;IACP,6BAAsB;IAAtB,8BAAsB;QAAtB,2BAAsB;YAAtB,uBAAsB;IACtB,qBAA+F;IAC/F,cETwD;IFUxD,mBAAkB;IAClB,WAAU,EAKX;IINC;MJPF;QAWI,cEdsD,EFgBzD,EAAA","file":"rplc-teaser-standard.css","sourcesContent":["@import 'rplc-teaser-standard.variables';\n\n.rplc-teaser-standard {\n  $self: &;\n\n  height: 100%;\n\n  &__title {\n    flex: 1;\n  }\n\n  &__cta {\n    @include typography-text-small;\n    @include typography-link-standard;\n    align-self: flex-start;\n    margin-bottom: $teaser-standard-cta-margin-bottom;\n\n    @include breakpoint(phablet) {\n      @include typography-text-standard;\n      @include typography-link-standard;\n    }\n  }\n\n  &__wrapper-link {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n\n    &:hover {\n      #{ $self }__cta {\n        @include typography-link-standard-hover;\n      }\n    }\n  }\n\n  &__image-wrapper {\n    line-height: 0;\n  }\n\n  &__text-wrapper {\n    background-color: $teaser-standard-text-section-background;\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    margin: $teaser-standard-text-section-eats-in $teaser-standard-text-section-horizontal-margin 0;\n    padding: $teaser-standard-text-section-padding-mobile;\n    position: relative;\n    z-index: 2;\n\n    @include breakpoint(phablet) {\n      padding: $teaser-standard-text-section-padding-large;\n    }\n  }\n}\n\n// end of file\n","//\n// Tier 1 variables\n//\n// The main purpose of tier 1 is to set out the values for single CSS properties concepts, such as font size and color.\n//\n// This file is, essentially, a bunch of enumerations and represent the very core building blocks of the visual system.\n//\n// The enumerations are deliberately a little obfuscates to avoid direct array access. Access should all go through\n// the specific accessor function and/or mixin provided for each.\n//\n//\n\n@function safe-map-get($map, $option) {\n  @if map-has-key($map, $option) {\n    @return map-get($map, $option);\n  } @else {\n    @error '#{$map} does not contain the key #{$option}';\n    @return null;\n  }\n}\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n\n//\n// Function to get a brand color\n//\n@function get-brand-color($option: 'primary') {\n  $brand-colors: (\n    'primary': #fdc513,\n    'primary-tint-1': #ffd44b,\n    'primary-tint-2': #ffd960,\n  );\n\n  @if $option != 'all' {\n    @return safe-map-get($brand-colors, $option);\n  } @else {\n    @return $brand-colors;\n  }\n}\n\n// generates a JSON array of brand colors to be used by PatternLab\n$xxx-bc: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', get-brand-color('all'), (prefix: '{ \"color_brand\":', suffix: '}'));\n\n//\n// Function to get a neutral color\n//\n@function get-neutral-color($option: 'gray') {\n  $neutral-colors: (\n    'white': #fff,\n    'very-light-gray': #f6f6f6,\n    'light-gray': #e9e9e9,\n    'gray': #d1d1d1,\n    'dark-gray': #666,\n    'very-dark-gray': #383838,\n    'black': #000,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($neutral-colors, $option);\n  } @else {\n    @return $neutral-colors;\n  }\n}\n\n// generates a JSON array of neutral colors to be used by PatternLab\n$xxx-nc: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', get-neutral-color('all'), (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n//\n// Function to get a utility color\n//\n@function get-utility-color($option: 'alert') {\n  $utility-colors: (\n    'alert': #ee2d14,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($utility-colors, $option);\n  } @else {\n    @return $utility-colors;\n  }\n}\n// generates a JSON array of utility colors to be used by PatternLab\n$xxx-uc: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', get-utility-color('all'), (prefix: '{ \"color_utility\":', suffix: '}'));\n\n\n//\n// Font size\n//\n\n// Function to get a font size value from its array entry key\n@function get-font-size($option: 'm') {\n  // don't panic - these get converted to rem when they are returned\n  $font-sizes: (\n    'xxs': 12px,\n    'xs': 14px,\n    's': 16px,\n    'm': 18px,\n    'ml': 20px,\n    'l': 24px,\n    'xl': 28px,\n    'xxl': 36px,\n  );\n  @if $option != 'all' {\n    @return rem(safe-map-get($font-sizes, $option));\n  } @else {\n    @return $font-sizes;\n  }\n}\n\n//\n// Font size mixin\n//\n@mixin font-size($option: 'm') {\n  font-size: get-font-size($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fs: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', get-font-size('all'), (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n\n// Function to get a line height value from its array entry key\n@function get-line-height($option: 'm') {\n  $line-heights: (\n    's': 1,\n    's-1': 1.2,\n    'm': 1.6,\n    'm-1': 1.75,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($line-heights, $option);\n  } @else {\n    @return $line-heights;\n  }\n}\n\n//\n// Line height mixin\n//\n@mixin line-height($option: 'm') {\n  line-height: get-line-height($option);\n}\n\n// generates a JSON array of line heights to be used by PatternLab\n$xxx-lh: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', get-line-height('all'), (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n\n// Function to get a letter spacing value from its array entry key\n@function get-letter-spacing($option: 'm') {\n  $letter-spacings: (\n    'compact': -.03em,\n    'standard': -.01em,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($letter-spacings, $option);\n  } @else {\n    @return $letter-spacings;\n  }\n}\n\n@mixin letter-spacing($option: 'standard') {\n  letter-spacing: get-letter-spacing($option);\n}\n\n// generates a JSON array of letter spacing to be used by PatternLab\n$xxx-ls: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', get-letter-spacing('all'), (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n\n// Function to get a font weight value from its array entry key\n@function get-font-weight($option: 'm') {\n  $font-weights: (\n    'light': 300,\n    'normal': 400,\n    'bold': 700,\n  );\n  @if $option != 'all' {\n    @return safe-map-get($font-weights, $option);\n  } @else {\n    @return $font-weights;\n  }\n}\n\n@mixin font-weight($option: 'normal') {\n  font-weight: get-font-weight($option);\n}\n\n// generates a JSON array of font sizes to be used by PatternLab\n$xxx-fw: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', get-font-weight('all'), (prefix: '{ \"font_weight\":', suffix: '}'));\n\n// Function to get a spacing value from its array entry key\n@function get-spacing($option: 'm') {\n  // don't panic - these get converted to rem when they are returned\n  $space-unit: 16px;\n  $spacings: (\n    'xs': $space-unit / 4, // 4px\n    's': $space-unit / 2, // 8px\n    'm': $space-unit,  // 16px\n    'l': 2 * $space-unit, // 32px\n    'xl': 3 * $space-unit, // 48px\n  );\n  @if $option != 'all' {\n    @return rem(safe-map-get($spacings, $option));\n  } @else {\n    @return $spacings;\n  }\n}\n// generates a JSON array of spacing to be used by PatternLab\n$xxx-spac: export('dist/source/_patterns/00-subatoms/30-spacing/spacing.json', get-spacing('all'), (prefix: '{ \"spacing\":', suffix: '}'));\n\n\n// end of file\n\n","// from https://github.com/pierreburel/sass-rem\n\n$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == 'comma' or $separator == 'space' {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists('list-separator') == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == 'list' {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == 'map' {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n\n// end of variables\n","//\n// Tier 2 variables\n//\n\n@import 'x.tier-1';\n@import 'abstract/mixins';\n\n@function is-not-in-list ($list, $value) {\n  @return index($list, $value) == null;\n}\n\n@mixin typography-text-extra-small {\n  @include font-size('xs');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('s');\n  }\n}\n\n// internal function for small text mixin parameters\n@function xxx-tts-params ($option: 'keys') {\n  $typography-text-small-params: (\n    'm': 'Default value, up-sized to medium',\n    //'ml': 'Up-sizes to medium-large on non-mobile devices',\n    //'s': 'Prevents up-sizing by maintaining small font size on all devices',\n  );\n\n  @if $option != 'all' {\n    @return map-keys($typography-text-small-params);\n  } @else {\n    @return $typography-text-small-params;\n  }\n}\n\n//\n// Small text mixin. Outputs with a small (s) font size on mobile and a medium  on other devices\n//\n// The responds arguments allows some control over the up-sizing on non-mobile devices.\n// Options:\n//    m   Default value, up-sized to medium\n//    ml  Up-sizes to medium-large on non-mobile devices\n//    s   Prevents up-sizing by maintaining small font size on all devices\n//\n@mixin typography-text-small ($responds: 'm') {\n  @if is-not-in-list(xxx-tts-params(), $responds) { // sass-lint:disable-line empty-args\n    @error '#{$responds} is not a legitimate parameter';\n  }\n\n  $mobile-font-size: 's';\n  @include font-size($mobile-font-size);\n  @include font-weight('light');\n  @include line-height('s-1');\n\n  @if $responds != $mobile-font-size {\n    @include breakpoint(phablet) {\n      @include font-size($responds);\n    }\n  }\n}\n// generates a JSON array of typography-text-small paarameters to be used by PatternLab\n$xxx-tts: export('dist/source/_patterns/00-subatoms/50-tier-2-mixins/typography-text-small.json', xxx-tts-params('all'), (prefix: '{ \"typography_text_small\":', suffix: '}'));\n\n\n@mixin typography-text-standard {\n  @include font-size('m');\n  @include font-weight('light');\n  @include letter-spacing('standard');\n  @include line-height('m');\n\n  @include breakpoint(phablet) {\n    @include font-size('ml');\n    @include line-height('m-1');\n  }\n}\n\n@mixin typography-text-large ($responds: 'l') {\n  @include font-size('ml');\n\n  @include breakpoint(phablet) {\n    @include font-size('l');\n    @include line-height('m');\n  }\n}\n\n@mixin typography-link-standard-hover {\n  background-color: get-brand-color();\n}\n\n@mixin typography-link-standard {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-brand-color();\n  display: inline;\n\n  &:hover {\n    @include typography-link-standard-hover;\n  }\n}\n\n@mixin typography-link-alert {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-utility-color('alert');\n  display: inline;\n\n  &:hover {\n    color: get-utility-color('alert');\n  }\n}\n\n@mixin typography-link-inverse-hover {\n  background-color: get-neutral-color('white');\n}\n\n@mixin typography-link-inverse {\n  @include font-weight('bold');\n  border-bottom: 2px solid get-neutral-color('white');\n  display: inline;\n\n  &:hover {\n    @include typography-link-inverse-hover;\n  }\n}\n\n// Medium  on mobile, Medium large on bigger devices\n@mixin typography-heading-medium {\n  @include font-size('m');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('ml');\n  }\n}\n\n// Medium large on mobile, Extra large on bigger devices\n@mixin typography-heading-medium-large  {\n  @include font-size('ml');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('xl');\n  }\n}\n\n// Large on mobile, Extra extra large on bigger devices\n@mixin typography-heading-large {\n  @include font-size('l');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('xxl');\n  }\n}\n\n// Extra large on mobile, Extra extra large on bigger devices\n@mixin typography-heading-extra-large {\n  @include font-size('xl');\n  @include font-weight('bold');\n  @include letter-spacing('compact');\n  @include line-height('s-1');\n\n  @include breakpoint(phablet) {\n    @include font-size('xxl');\n  }\n}\n\n// end of file\n","// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n\n// end of file\n"]}