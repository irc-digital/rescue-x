{"version":3,"sources":["05-components/50-pull-quote/rplc-pull-quote.scss","../scss/x.tier-1.scss","../scss/_variables.scss","05-components/50-pull-quote/_rplc-pull-quote.variables.scss"],"names":[],"mappings":"AAGA;EAGE,uBCmBa;EDlBb,iBAAgB;EAChB,YAAW,EA4GZ;EA1GC;IE2CA,kBAAiB;IACjB,mBAAkB;IAClB,mBA3BwD;IA4BxD,mBAhCoB;IAiCpB,oBAjCoB,EFZnB;EAED;IACE,gBAAe;IACf,aAAY;IACZ,oBAAmB;IACnB,6BAA4B;IAC5B,mBAAkB,EAKnB;IE+DC;MFzEF;QAQI,6BAA4B,EAE/B,EAAA;EAED;IACE,gBAAe;IACf,mBAAkB;IAClB,iBAAgB;IAChB,sBAAqB;IACrB,kBAAiB;IACjB,mBAAkB,EA6BnB;IE0BC;MF7DF;QASI,gBAAe;QACf,mBAAkB,EAyBrB,EAAA;IEwBC;MF3DF;QAcI,eAAc,EAqBjB,EAAA;IAnCA;MAkBG,ijBAAgjB;MAChjB,sBAAqB;MACrB,YAAW;MACX,eAAc;MACd,aAAY;MACZ,WAAU;MACV,mBAAkB;MAClB,WAAU;MACV,YAAW,EAQZ;ME2BD;QF7DD;UA6BK,sBAAqB;UACrB,aAAY;UACZ,WAAU;UACV,YAAW,EAEd,EAAA;EAGF;IAOG,uBC7CS;ID8CT,UAAS,EASV;IEOD;MFxBD;QAWK,iBAAgB,EAMnB,EAAA;EEOD;IFJD;MAIK,YAAW;MACX,mBAAkB,EACnB,EAAA;EEFH;IFWD;MAIK,aAAY;MACZ,kBAAiB,EAClB,EAAA;;AEvBH;EFiBD;IASO,oBAAmB,EACpB,EAAA;EAKP;IACE,mCG/GsD,EHgHvD","file":"rplc-pull-quote.css","sourcesContent":["@import 'rplc-pull-quote.variables';\n\n// if no modifier is used the quote should be full width\n.rplc-pull-quote {\n  $self: &;\n\n  background-color: $pull-quote-background-color;\n  margin-top: 45px;\n  width: 100%;\n\n  &__content {\n    @include standard-row;\n  }\n\n  &__text-wrapper {\n    font-size: 20px;\n    height: auto;\n    margin: 45px auto 0;\n    padding: 65px 16px 40px 25px;\n    position: relative;\n\n    @include breakpoint(phablet) {\n      padding: 15px 20px 20px 25px;\n    }\n  }\n\n  &__text {\n    font-size: 20px;\n    font-style: italic;\n    font-weight: 100;\n    letter-spacing: .17px;\n    line-height: 1.35;\n    position: relative;\n\n    @include breakpoint(phablet) {\n      font-size: 28px;\n      padding-left: 87px;\n    }\n\n    @include breakpoint(tablet) {\n      margin-left: 0;\n    }\n\n    &::before {\n      background: url('data:image/svg+xml,%3Csvg%20viewBox%3D%220%200%2064%2064%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20stroke-linejoin%3D%22round%22%20stroke-miterlimit%3D%221.414%22%3E%3Cpath%20d%3D%22M11.8%2048.3V33c0-10.8%205.3-18.5%2016.3-20.1v7.3c-5.6%201.7-6.4%205.5-6.5%2010.8h6.5v17.3H11.8zm23.8%200V33c0-10.8%205.4-18.5%2016.3-20.1v7.3c-5.6%201.7-6.4%205.5-6.5%2010.8h6.5v17.3H35.6z%22%20fill%3D%22%23fdc513%22%20fill-rule%3D%22nonzero%22%2F%3E%3C%2Fsvg%3E') no-repeat center center;\n      background-size: 65px;\n      content: '';\n      display: block;\n      height: 50px;\n      left: -5px;\n      position: absolute;\n      top: -60px;\n      width: 50px;\n\n      @include breakpoint(phablet) {\n        background-size: 85px;\n        height: 80px;\n        top: -10px;\n        width: 80px;\n      }\n    }\n  }\n\n  &--placement-left,\n  &--placement-right {\n    // drop standard row and floats down a level on to content*\n    // outer div to full width and standard row to content, whit bg on text-wrapper bq\n    //white bg on wrapper for float and on outer for full width\n    //margins on blockquote\n    #{ $self }__text-wrapper {\n      background-color: $pull-quote-background-color;\n      margin: 0;\n\n      @include breakpoint(phablet) {\n        max-width: 450px;\n      }\n\n      // @include breakpoint(desktop) {\n      //   max-width: 550px;\n      // }\n    }\n  }\n\n  &--placement-left {\n\n    @include breakpoint(phablet) {\n      #{ $self }__text-wrapper {\n        float: left;\n        margin-right: 45px;\n      }\n    }\n    // @include breakpoint(desktop) {\n    //   #{ $self }__text-wrapper {\n    //      margin-left: -90px;\n    //   }\n    // }\n  }\n\n  &--placement-right {\n\n    @include breakpoint(phablet) {\n      #{ $self }__text-wrapper {\n        float: right;\n        margin-left: 45px;\n      }\n      @include breakpoint(desktop) {\n        #{ $self }__text-wrapper {\n          margin-right: -90px;\n        }\n    }\n    }\n  }\n\n  &--background-transparent {\n    background-color: $pull-quote-transparent-background-color;\n  }\n}\n\n","//\n// Tier 1 variables\n//\n\n//\n// Font family\n//\n$font-family-sans-serif: akzidenz-grotesk, Arial, Helvetica, sans-serif;\n\n//\n// Colors\n//\n$irc-yellow: #fdc513;\n$irc-yellow-tint-1: #ffd44b;\n$irc-yellow-tint-2: #ffd960;\n\n$color-brand: (\n  primary: $irc-yellow,\n  primary-highlight-1: $irc-yellow-tint-1,\n  primary-highlight-2: $irc-yellow-tint-2,\n);\n$color-brand-x: export('dist/source/_patterns/00-subatoms/05-color/color-brand.json', $color-brand, (prefix: '{ \"color_brand\":', suffix: '}'));\n\n// sass-lint:disable no-color-keywords\n$color-neutral: (\n  'white': #fff,\n  'very-light-gray': #f6f6f6,\n  'light-gray': #e9e9e9,\n  'gray': #d1d1d1,\n  'dark-gray': #666,\n  'very-dark-gray': #383838,\n  'black': #000,\n);\n$color-neutral-x: export('dist/source/_patterns/00-subatoms/05-color/color-neutral.json', $color-neutral, (prefix: '{ \"color_neutral\":', suffix: '}'));\n\n$red: #ee2d14;\n\n$color-utility: (\n  alert: $red,\n);\n$color-utility-x: export('dist/source/_patterns/00-subatoms/05-color/color-utility.json', $color-utility, (prefix: '{ \"color_utility\":', suffix: '}'));\n\n//\n// Font size\n//\n$font-size: (\n  m: 1.125rem, // 18px\n  m-1: 1.25rem, // 20px\n  l: 1.625rem,  // 26px\n  l-1: 2.25rem,  // 36px\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$font-size-x: export('dist/source/_patterns/00-subatoms/10-font-size/font-size.json', $font-size, (prefix: '{ \"font_size\":', suffix: '}'));\n\n//\n// Line height\n//\n$line-height: (\n  s: 1,\n  s-1: 1.2,\n  m: 1.6,\n  m-1: 1.75,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$line-height-x: export('dist/source/_patterns/00-subatoms/20-line-height/line-height.json', $line-height, (prefix: '{ \"line_height\":', suffix: '}'));\n\n//\n// Letter spacing\n//\n$letter-spacing: (\n  compact: -.03em,\n  standard: -.01em,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$letter-spacing-x: export('dist/source/_patterns/00-subatoms/15-letter-spacing/letter-spacing.json', $letter-spacing, (prefix: '{ \"letter_spacing\":', suffix: '}'));\n\n//\n// Font weight\n//\n$font-weight: (\n  light: 300,\n  normal: 400,\n  bold: 700,\n);\n// generates a JSON array of font sizes to be used by PatternLab\n$font-weight-x: export('dist/source/_patterns/00-subatoms/25-font-weight/font-weight.json', $font-weight, (prefix: '{ \"font_weight\":', suffix: '}'));\n\n// end of file\n","@import 'helpers/rem';\n@import 'x.tier-1';\n@import 'x.tier-2';\n\n// public variables\n\n// colors\n// THESE ARE ALL DEPRECATED - WILL REPLACE THEM LATER\n$white: map-get($color-neutral, 'white');\n$very-light-gray: map-get($color-neutral, 'very-light-gray');\n$light-gray: map-get($color-neutral, 'light-gray');\n$gray: map-get($color-neutral, 'gray');\n$dark-gray: map-get($color-neutral, 'dark-gray');\n$very-dark-gray: map-get($color-neutral, 'very-dark-gray');\n$black: map-get($color-neutral, 'black');\n$red: map-get($color-utility, 'alert');\n$alert: $red;\n$private-irc-yellow: map-get($color-brand, 'primary');\n$primary-color: $private-irc-yellow;\n$standard-overlay-treatment: rgba(0, 0, 0, .5);\n\n// font weights\n$strong: map-get($font-weight, 'bold');\n\n$standard-gutter: 1rem;\n$standard-horizontal-margin-accounting-for-gutters: 2 * $standard-gutter;\n$private-row-gutter: $standard-gutter; // kept distinct from the standard gutter as i can see this changing to 2rem\n$well-width-inner: rem(1208px);\n$max-row-width: $well-width-inner + ($standard-gutter * 2);\n\n$smallest-desktop-size: $max-row-width;\n$smallest-desktop-size-less-gutters: $well-width-inner - rem(1px);\n$smallest-laptop-size: rem(1024px);\n$smallest-tablet-size: rem(768px);\n$smallest-phablet-size: rem(641px);\n\n// The default font family.\n$base-font-family: $font-family-sans-serif;\n\n$body-background-color: $very-light-gray;\n\n// mixins\n// only create for really ubiquitous stuff\n// a rule-of-thumb would be 'does this feel like boilerplating' - if so, consider a mixin\n\n//\n// standard-row mixin\n//\n// Useful when an element needs to fit into our well.\n//\n// Note: We've inherited using padding rather than margin for the breathing space from rescue.org\n//\n@mixin standard-row {\n  margin-left: auto;\n  margin-right: auto;\n  max-width: $max-row-width;\n  padding-left: $private-row-gutter;\n  padding-right: $private-row-gutter;\n}\n\n//\n// breakpoint mixin\n//\n// A mixin to help with our most common media queries\n//\n// accepts:  desktop, laptop, tablet and phablet.\n//\n// mobile is not an option as our SCSS should be mobile-first\n//\n// you are encouraged to write your own media queries when you need to\n// do work outside of these common targets. if possible, use these variables when you\n// need to target a device in the broadest sense:\n//\n//    $smallest_phablet_size (start  of phablet)\n//    $smallest_tablet_size (start of tablet)\n//    $smallest_laptop_size (start of laptop)\n//    $smallest_desktop_size-width (start of desktop)\n//\n//\n@mixin breakpoint($point) {\n  @if $point == desktop {\n    @media only screen and (min-width: #{$smallest-desktop-size}) { @content ; }\n  } @else if $point == laptop {\n    @media only screen and (min-width: #{$smallest-laptop-size}) { @content ; }\n  } @else if $point == tablet {\n    @media only screen and (min-width: #{$smallest-tablet-size}) { @content ; }\n  } @else if $point == phablet {\n    @media only screen and (min-width: #{$smallest-phablet-size})  { @content ; }\n  }\n}\n\n//\n// Vertical Rhythm\n//\n// TAKEN FROM https://github.com/JohnAlbin/normalize-scss\n//\n// This is the minimal amount of code needed to create vertical rhythm in our\n// CSS. If you are looking for a robust solution, look at the excellent Typey\n// library. @see https://github.com/jptaranto/typey\n\n@function normalize-rhythm($value, $relative-to: $base-font-size, $unit: $base-unit) {\n  @if unit($value) != px {\n    @error 'The normalize vertical-rhythm module only supports px inputs. The typey library is better.';\n  }\n  @if $unit == rem {\n    @return ($value / $base-font-size) * 1rem;\n  } @else if $unit == em {\n    @return ($value / $relative-to) * 1em;\n  } @else { // $unit == px\n    @return $value;\n  }\n}\n\n// end of file\n","@import '../../../scss/variables';\n\n$pull-quote-background-color: $white;\n$pull-quote-transparent-background-color: rgba(1, 1, 5, 0);\n// end of file\n"]}